
asd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fac  08004fac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb4  08004fb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  0800502c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  0800502c  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfb7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dd7  00000000  00000000  0002c057  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000990  00000000  00000000  0002e890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e27  00000000  00000000  0002f220  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097a8  00000000  00000000  00050047  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4913  00000000  00000000  000597ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea0  00000000  00000000  0011e180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004de8 	.word	0x08004de8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004de8 	.word	0x08004de8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff fa33 	bl	80001d0 <strlen>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	e007      	b.n	8000d84 <bufclr+0x28>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf3      	blt.n	8000d74 <bufclr+0x18>
}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b096      	sub	sp, #88	; 0x58
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8000d9e:	f000 f915 	bl	8000fcc <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8000da2:	4823      	ldr	r0, [pc, #140]	; (8000e30 <ESP_Init+0x9c>)
 8000da4:	f000 f9dc 	bl	8001160 <Uart_sendstring>
	HAL_Delay(1000);
 8000da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dac:	f000 feee 	bl	8001b8c <HAL_Delay>

	Uart_flush();
 8000db0:	f000 f954 	bl	800105c <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8000db4:	481f      	ldr	r0, [pc, #124]	; (8000e34 <ESP_Init+0xa0>)
 8000db6:	f000 f9d3 	bl	8001160 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8000dba:	bf00      	nop
 8000dbc:	481e      	ldr	r0, [pc, #120]	; (8000e38 <ESP_Init+0xa4>)
 8000dbe:	f000 f9fd 	bl	80011bc <Wait_for>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f9      	beq.n	8000dbc <ESP_Init+0x28>

	Uart_flush();
 8000dc8:	f000 f948 	bl	800105c <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <ESP_Init+0xa8>)
 8000dce:	f000 f9c7 	bl	8001160 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000dd2:	bf00      	nop
 8000dd4:	4818      	ldr	r0, [pc, #96]	; (8000e38 <ESP_Init+0xa4>)
 8000dd6:	f000 f9f1 	bl	80011bc <Wait_for>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f9      	beq.n	8000dd4 <ESP_Init+0x40>

	Uart_flush();
 8000de0:	f000 f93c 	bl	800105c <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000de4:	f107 0008 	add.w	r0, r7, #8
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	4914      	ldr	r1, [pc, #80]	; (8000e40 <ESP_Init+0xac>)
 8000dee:	f003 fbe5 	bl	80045bc <siprintf>
	Uart_sendstring(data);
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f9b2 	bl	8001160 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 8000dfc:	bf00      	nop
 8000dfe:	4811      	ldr	r0, [pc, #68]	; (8000e44 <ESP_Init+0xb0>)
 8000e00:	f000 f9dc 	bl	80011bc <Wait_for>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f9      	beq.n	8000dfe <ESP_Init+0x6a>

	Uart_flush();
 8000e0a:	f000 f927 	bl	800105c <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <ESP_Init+0xb4>)
 8000e10:	f000 f9a6 	bl	8001160 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000e14:	bf00      	nop
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <ESP_Init+0xa4>)
 8000e18:	f000 f9d0 	bl	80011bc <Wait_for>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f9      	beq.n	8000e16 <ESP_Init+0x82>

	Uart_flush();
 8000e22:	f000 f91b 	bl	800105c <Uart_flush>

}
 8000e26:	bf00      	nop
 8000e28:	3758      	adds	r7, #88	; 0x58
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	08004e00 	.word	0x08004e00
 8000e34:	08004e0c 	.word	0x08004e0c
 8000e38:	08004e14 	.word	0x08004e14
 8000e3c:	08004e1c 	.word	0x08004e1c
 8000e40:	08004e2c 	.word	0x08004e2c
 8000e44:	08004e44 	.word	0x08004e44
 8000e48:	08004e50 	.word	0x08004e50

08000e4c <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, uint16_t value[])
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	6018      	str	r0, [r3, #0]
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	6019      	str	r1, [r3, #0]
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8000e64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f003 fb9b 	bl	80045ac <memset>
	char local_buf2[30] = {0};
 8000e76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	231e      	movs	r3, #30
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2100      	movs	r1, #0
 8000e82:	f003 fb93 	bl	80045ac <memset>
	char field_buf[200] = {0};
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	23c8      	movs	r3, #200	; 0xc8
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	f003 fb8b 	bl	80045ac <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 8000e96:	4844      	ldr	r0, [pc, #272]	; (8000fa8 <ESP_Send_Multi+0x15c>)
 8000e98:	f000 f962 	bl	8001160 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000e9c:	bf00      	nop
 8000e9e:	4843      	ldr	r0, [pc, #268]	; (8000fac <ESP_Send_Multi+0x160>)
 8000ea0:	f000 f98c 	bl	80011bc <Wait_for>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f9      	beq.n	8000e9e <ESP_Send_Multi+0x52>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	493e      	ldr	r1, [pc, #248]	; (8000fb0 <ESP_Send_Multi+0x164>)
 8000eb6:	f003 fb81 	bl	80045bc <siprintf>
	for (int i=0; i<numberoffileds; i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000ec0:	e01c      	b.n	8000efc <ESP_Send_Multi+0xb0>
	{
		sprintf(field_buf, "&field%d=%u",i+1, value[i]);
 8000ec2:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000ec6:	1c59      	adds	r1, r3, #1
 8000ec8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1d3a      	adds	r2, r7, #4
 8000ed0:	6812      	ldr	r2, [r2, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	f107 0014 	add.w	r0, r7, #20
 8000eda:	460a      	mov	r2, r1
 8000edc:	4935      	ldr	r1, [pc, #212]	; (8000fb4 <ESP_Send_Multi+0x168>)
 8000ede:	f003 fb6d 	bl	80045bc <siprintf>
		strcat (local_buf, field_buf);
 8000ee2:	f107 0214 	add.w	r2, r7, #20
 8000ee6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fb85 	bl	80045fc <strcat>
	for (int i=0; i<numberoffileds; i++)
 8000ef2:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbdb      	blt.n	8000ec2 <ESP_Send_Multi+0x76>
	}

	strcat(local_buf, "\r\n");
 8000f0a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f95e 	bl	80001d0 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <ESP_Send_Multi+0x16c>)
 8000f20:	8811      	ldrh	r1, [r2, #0]
 8000f22:	7892      	ldrb	r2, [r2, #2]
 8000f24:	8019      	strh	r1, [r3, #0]
 8000f26:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 8000f28:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f94f 	bl	80001d0 <strlen>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8000f38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f3c:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 8000f40:	491e      	ldr	r1, [pc, #120]	; (8000fbc <ESP_Send_Multi+0x170>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 fb3a 	bl	80045bc <siprintf>
	Uart_sendstring(local_buf2);
 8000f48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f907 	bl	8001160 <Uart_sendstring>
	while (!(Wait_for(">")));
 8000f52:	bf00      	nop
 8000f54:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <ESP_Send_Multi+0x174>)
 8000f56:	f000 f931 	bl	80011bc <Wait_for>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f9      	beq.n	8000f54 <ESP_Send_Multi+0x108>

	Uart_sendstring (local_buf);
 8000f60:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f8fb 	bl	8001160 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8000f6a:	bf00      	nop
 8000f6c:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <ESP_Send_Multi+0x178>)
 8000f6e:	f000 f925 	bl	80011bc <Wait_for>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f9      	beq.n	8000f6c <ESP_Send_Multi+0x120>

	while (!(Wait_for("CLOSED")));
 8000f78:	bf00      	nop
 8000f7a:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <ESP_Send_Multi+0x17c>)
 8000f7c:	f000 f91e 	bl	80011bc <Wait_for>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f9      	beq.n	8000f7a <ESP_Send_Multi+0x12e>

	bufclr(local_buf);
 8000f86:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fee6 	bl	8000d5c <bufclr>
	bufclr(local_buf2);
 8000f90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fee1 	bl	8000d5c <bufclr>

	Ringbuf_init();
 8000f9a:	f000 f817 	bl	8000fcc <Ringbuf_init>

}
 8000f9e:	bf00      	nop
 8000fa0:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08004ed4 	.word	0x08004ed4
 8000fac:	08004e14 	.word	0x08004e14
 8000fb0:	08004f00 	.word	0x08004f00
 8000fb4:	08004f18 	.word	0x08004f18
 8000fb8:	08004f24 	.word	0x08004f24
 8000fbc:	08004eac 	.word	0x08004eac
 8000fc0:	08004ebc 	.word	0x08004ebc
 8000fc4:	08004ec0 	.word	0x08004ec0
 8000fc8:	08004ecc 	.word	0x08004ecc

08000fcc <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <Ringbuf_init+0x3c>)
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <Ringbuf_init+0x40>)
 8000fd4:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <Ringbuf_init+0x44>)
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <Ringbuf_init+0x48>)
 8000fda:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <Ringbuf_init+0x4c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <Ringbuf_init+0x4c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <Ringbuf_init+0x4c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <Ringbuf_init+0x4c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	60da      	str	r2, [r3, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000016c 	.word	0x2000016c
 800100c:	2000008c 	.word	0x2000008c
 8001010:	20000168 	.word	0x20000168
 8001014:	200000d4 	.word	0x200000d4
 8001018:	20000128 	.word	0x20000128

0800101c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	3301      	adds	r3, #1
 800102e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001032:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	429a      	cmp	r2, r3
 800103c:	d007      	beq.n	800104e <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	79f9      	ldrb	r1, [r7, #7]
 8001046:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <Uart_flush>:

void Uart_flush (void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <Uart_flush+0x1c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <Uart_flush+0x1c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000016c 	.word	0x2000016c

0800107c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <Uart_read+0x4c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <Uart_read+0x4c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	429a      	cmp	r2, r3
 8001090:	d102      	bne.n	8001098 <Uart_read+0x1c>
  {
    return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e010      	b.n	80010ba <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <Uart_read+0x4c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <Uart_read+0x4c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	5cd3      	ldrb	r3, [r2, r3]
 80010a4:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <Uart_read+0x4c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <Uart_read+0x4c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010b6:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	2000016c 	.word	0x2000016c

080010cc <Uart_write>:

void Uart_write(int c)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db21      	blt.n	800111e <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <Uart_write+0x60>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	3301      	adds	r3, #1
 80010e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010e6:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 80010e8:	bf00      	nop
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <Uart_write+0x60>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d0f9      	beq.n	80010ea <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <Uart_write+0x60>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <Uart_write+0x60>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	b2c9      	uxtb	r1, r1
 8001104:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <Uart_write+0x60>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <Uart_write+0x64>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <Uart_write+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800111c:	60da      	str	r2, [r3, #12]
	}
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000168 	.word	0x20000168
 8001130:	20000128 	.word	0x20000128

08001134 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <IsDataAvailable+0x28>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <IsDataAvailable+0x28>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	b29b      	uxth	r3, r3
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	b29b      	uxth	r3, r3
 800114c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000016c 	.word	0x2000016c

08001160 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001168:	e006      	b.n	8001178 <Uart_sendstring+0x18>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ffaa 	bl	80010cc <Uart_write>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f4      	bne.n	800116a <Uart_sendstring+0xa>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <Uart_peek+0x30>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <Uart_peek+0x30>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	429a      	cmp	r2, r3
 800119a:	d102      	bne.n	80011a2 <Uart_peek+0x1a>
  {
    return -1;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	e005      	b.n	80011ae <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <Uart_peek+0x30>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <Uart_peek+0x30>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	2000016c 	.word	0x2000016c

080011bc <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff f801 	bl	80001d0 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80011d2:	bf00      	nop
 80011d4:	f7ff ffae 	bl	8001134 <IsDataAvailable>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0fa      	beq.n	80011d4 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 80011de:	f7ff ffd3 	bl	8001188 <Uart_peek>
 80011e2:	4601      	mov	r1, r0
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4299      	cmp	r1, r3
 80011ee:	d01a      	beq.n	8001226 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <Wait_for+0xa4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <Wait_for+0xa4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8001202:	e7e6      	b.n	80011d2 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
		Uart_read();
 800120a:	f7ff ff37 	bl	800107c <Uart_read>
		if (so_far == len) return 1;
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	429a      	cmp	r2, r3
 8001214:	d101      	bne.n	800121a <Wait_for+0x5e>
 8001216:	2301      	movs	r3, #1
 8001218:	e01d      	b.n	8001256 <Wait_for+0x9a>
		while (!IsDataAvailable());
 800121a:	bf00      	nop
 800121c:	f7ff ff8a 	bl	8001134 <IsDataAvailable>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0fa      	beq.n	800121c <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8001226:	f7ff ffaf 	bl	8001188 <Uart_peek>
 800122a:	4601      	mov	r1, r0
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4299      	cmp	r1, r3
 8001236:	d0e5      	beq.n	8001204 <Wait_for+0x48>
	}

	if (so_far != len)
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	429a      	cmp	r2, r3
 800123e:	d002      	beq.n	8001246 <Wait_for+0x8a>
	{
		so_far = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
		goto again;
 8001244:	e7c5      	b.n	80011d2 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	429a      	cmp	r2, r3
 800124c:	d101      	bne.n	8001252 <Wait_for+0x96>
 800124e:	2301      	movs	r3, #1
 8001250:	e001      	b.n	8001256 <Wait_for+0x9a>
	else return -1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000016c 	.word	0x2000016c

08001264 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	2b00      	cmp	r3, #0
 8001284:	d013      	beq.n	80012ae <Uart_isr+0x4a>
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00e      	beq.n	80012ae <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <Uart_isr+0xac>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff feb8 	bl	800101c <store_char>
        return;
 80012ac:	e02c      	b.n	8001308 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d027      	beq.n	8001308 <Uart_isr+0xa4>
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d022      	beq.n	8001308 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <Uart_isr+0xb0>)
 80012c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <Uart_isr+0xb0>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d108      	bne.n	80012e0 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012dc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80012de:	e013      	b.n	8001308 <Uart_isr+0xa4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <Uart_isr+0xb0>)
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <Uart_isr+0xb0>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <Uart_isr+0xb0>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	3301      	adds	r3, #1
 80012f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <Uart_isr+0xb0>)
 80012f6:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	7bba      	ldrb	r2, [r7, #14]
 8001304:	605a      	str	r2, [r3, #4]
    	return;
 8001306:	bf00      	nop
    }
}
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000016c 	.word	0x2000016c
 8001314:	200000d4 	.word	0x200000d4

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f000 fbc3 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001322:	f000 f83d 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f000 f8fd 	bl	8001524 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800132a:	f000 f8d1 	bl	80014d0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800132e:	f000 f8a1 	bl	8001474 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t Value_Buf[4];
  uint16_t i = 0 ;
 8001332:	2300      	movs	r3, #0
 8001334:	81fb      	strh	r3, [r7, #14]
  ESP_Init("VodafoneNet-4DAU47", "mahrem129921");
 8001336:	4916      	ldr	r1, [pc, #88]	; (8001390 <main+0x78>)
 8001338:	4816      	ldr	r0, [pc, #88]	; (8001394 <main+0x7c>)
 800133a:	f7ff fd2b 	bl	8000d94 <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Temp_Measure(&sht21_1);
 800133e:	4816      	ldr	r0, [pc, #88]	; (8001398 <main+0x80>)
 8001340:	f000 fa2b 	bl	800179a <Temp_Measure>
	  Hum_Measure(&sht21_1);
 8001344:	4814      	ldr	r0, [pc, #80]	; (8001398 <main+0x80>)
 8001346:	f000 fa38 	bl	80017ba <Hum_Measure>

		Value_Buf[0] = sht21_1.son_sicaklik;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <main+0x80>)
 800134c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8001350:	4618      	mov	r0, r3
 8001352:	4621      	mov	r1, r4
 8001354:	f7ff fb62 	bl	8000a1c <__aeabi_d2uiz>
 8001358:	4603      	mov	r3, r0
 800135a:	b29b      	uxth	r3, r3
 800135c:	80bb      	strh	r3, [r7, #4]
		Value_Buf[1] = sht21_1.son_nem;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <main+0x80>)
 8001360:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8001364:	4618      	mov	r0, r3
 8001366:	4621      	mov	r1, r4
 8001368:	f7ff fb58 	bl	8000a1c <__aeabi_d2uiz>
 800136c:	4603      	mov	r3, r0
 800136e:	b29b      	uxth	r3, r3
 8001370:	80fb      	strh	r3, [r7, #6]

		ESP_Send_Multi("4XM47IGFZHSTL3S6", 2, Value_Buf);
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	461a      	mov	r2, r3
 8001376:	2102      	movs	r1, #2
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <main+0x84>)
 800137a:	f7ff fd67 	bl	8000e4c <ESP_Send_Multi>
		HAL_Delay(10000);
 800137e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001382:	f000 fc03 	bl	8001b8c <HAL_Delay>
		i++;
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	3301      	adds	r3, #1
 800138a:	81fb      	strh	r3, [r7, #14]
	  Temp_Measure(&sht21_1);
 800138c:	e7d7      	b.n	800133e <main+0x26>
 800138e:	bf00      	nop
 8001390:	08004f28 	.word	0x08004f28
 8001394:	08004f38 	.word	0x08004f38
 8001398:	200001c8 	.word	0x200001c8
 800139c:	08004f4c 	.word	0x08004f4c

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	; 0x50
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	2230      	movs	r2, #48	; 0x30
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 f8fc 	bl	80045ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <SystemClock_Config+0xcc>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <SystemClock_Config+0xcc>)
 80013ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d2:	6413      	str	r3, [r2, #64]	; 0x40
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <SystemClock_Config+0xcc>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <SystemClock_Config+0xd0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a21      	ldr	r2, [pc, #132]	; (8001470 <SystemClock_Config+0xd0>)
 80013ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <SystemClock_Config+0xd0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001400:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001410:	2308      	movs	r3, #8
 8001412:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001414:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800141a:	2302      	movs	r3, #2
 800141c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800141e:	2307      	movs	r3, #7
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fe2a 	bl	8003080 <HAL_RCC_OscConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001432:	f000 f89f 	bl	8001574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143a:	2302      	movs	r3, #2
 800143c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001442:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001446:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2105      	movs	r1, #5
 8001454:	4618      	mov	r0, r3
 8001456:	f002 f883 	bl	8003560 <HAL_RCC_ClockConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001460:	f000 f888 	bl	8001574 <Error_Handler>
  }
}
 8001464:	bf00      	nop
 8001466:	3750      	adds	r7, #80	; 0x50
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000

08001474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_I2C1_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <MX_I2C1_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_I2C1_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_I2C1_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_I2C1_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_I2C1_Init+0x50>)
 80014b2:	f000 fe5b 	bl	800216c <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 f85a 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000170 	.word	0x20000170
 80014c8:	40005400 	.word	0x40005400
 80014cc:	000186a0 	.word	0x000186a0

080014d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART3_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_USART3_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_USART3_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART3_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART3_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART3_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART3_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART3_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART3_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART3_UART_Init+0x4c>)
 8001508:	f002 fa1c 	bl	8003944 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 f82f 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000128 	.word	0x20000128
 8001520:	40004800 	.word	0x40004800

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_GPIO_Init+0x4c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <MX_GPIO_Init+0x4c>)
 8001534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_GPIO_Init+0x4c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_GPIO_Init+0x4c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <MX_GPIO_Init+0x4c>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_GPIO_Init+0x4c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <sht21_start_RH_HM>:
#include "main.h"
#include "sht21.h"

extern I2C_HandleTypeDef hi2c1;

void sht21_start_RH_HM(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af02      	add	r7, sp, #8

	uint8_t data[] = { START_HUM_HM };
 800158a:	23e5      	movs	r3, #229	; 0xe5
 800158c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, (uint8_t) WRITE_ADDRESS, data, 1,
 800158e:	1d3a      	adds	r2, r7, #4
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <sht21_start_RH_HM+0x2c>)
 800159c:	f000 ff1e 	bl	80023dc <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(200);
 80015a0:	20c8      	movs	r0, #200	; 0xc8
 80015a2:	f000 faf3 	bl	8001b8c <HAL_Delay>

}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000170 	.word	0x20000170

080015b4 <sht21_start_T_HM>:
void sht21_start_T_HM(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af02      	add	r7, sp, #8

	uint8_t data[] = { START_TEMP_HM };
 80015ba:	23e3      	movs	r3, #227	; 0xe3
 80015bc:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, (uint8_t) WRITE_ADDRESS, data, 1,
 80015be:	1d3a      	adds	r2, r7, #4
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2301      	movs	r3, #1
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <sht21_start_T_HM+0x2c>)
 80015cc:	f000 ff06 	bl	80023dc <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(200);
 80015d0:	20c8      	movs	r0, #200	; 0xc8
 80015d2:	f000 fadb 	bl	8001b8c <HAL_Delay>

}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000170 	.word	0x20000170

080015e4 <sht21_read_RH_HM>:
void sht21_read_RH_HM(SHT21_Handle_t *sht21_1) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
	uint8_t data[1];
	data[1] = READ_ADDRESS;
 80015ec:	2381      	movs	r3, #129	; 0x81
 80015ee:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint8_t) WRITE_ADDRESS, (uint8_t*) data, 1,
 80015f0:	f107 020c 	add.w	r2, r7, #12
 80015f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	4819      	ldr	r0, [pc, #100]	; (8001664 <sht21_read_RH_HM+0x80>)
 8001600:	f000 feec 	bl	80023dc <HAL_I2C_Master_Transmit>
			1000);
	HAL_I2C_Master_Receive(&hi2c1, (uint8_t) READ_ADDRESS, sht21_1->RH_DATA, 2,
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2302      	movs	r3, #2
 800160e:	2181      	movs	r1, #129	; 0x81
 8001610:	4814      	ldr	r0, [pc, #80]	; (8001664 <sht21_read_RH_HM+0x80>)
 8001612:	f000 ffe1 	bl	80025d8 <HAL_I2C_Master_Receive>
			1000);
	HAL_Delay(200);
 8001616:	20c8      	movs	r0, #200	; 0xc8
 8001618:	f000 fab8 	bl	8001b8c <HAL_Delay>

	sht21_1->Humidity_Value[0] = sht21_1->RH_DATA[0]; //MSB
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b29a      	uxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	811a      	strh	r2, [r3, #8]
	sht21_1->Humidity_Value[0] = sht21_1->Humidity_Value[0] << 8;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	891b      	ldrh	r3, [r3, #8]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b29a      	uxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	811a      	strh	r2, [r3, #8]
	sht21_1->Humidity_Value[1] = sht21_1->RH_DATA[1]; //LSB
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	785b      	ldrb	r3, [r3, #1]
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	815a      	strh	r2, [r3, #10]
	sht21_1->Humidity_Value[1] = sht21_1->Humidity_Value[1]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	895b      	ldrh	r3, [r3, #10]
			& ((uint16_t) LSB_CONFIG);
 8001640:	f023 030f 	bic.w	r3, r3, #15
 8001644:	b29a      	uxth	r2, r3
	sht21_1->Humidity_Value[1] = sht21_1->Humidity_Value[1]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	815a      	strh	r2, [r3, #10]
	sht21_1->Humidity = sht21_1->Humidity_Value[0] | sht21_1->Humidity_Value[1];
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	891a      	ldrh	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	895b      	ldrh	r3, [r3, #10]
 8001652:	4313      	orrs	r3, r2
 8001654:	b29a      	uxth	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	81da      	strh	r2, [r3, #14]

}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000170 	.word	0x20000170

08001668 <sht21_read_T_HM>:

void sht21_read_T_HM(SHT21_Handle_t *sht21_1) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8
 800166e:	6078      	str	r0, [r7, #4]

	uint8_t data[1];
	data[1] = READ_ADDRESS;
 8001670:	2381      	movs	r3, #129	; 0x81
 8001672:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint8_t) WRITE_ADDRESS, (uint8_t*) data, 1,
 8001674:	f107 020c 	add.w	r2, r7, #12
 8001678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	4819      	ldr	r0, [pc, #100]	; (80016e8 <sht21_read_T_HM+0x80>)
 8001684:	f000 feaa 	bl	80023dc <HAL_I2C_Master_Transmit>
			1000);
	HAL_I2C_Master_Receive(&hi2c1, (uint8_t) READ_ADDRESS, sht21_1->T_DATA, 2,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	1c9a      	adds	r2, r3, #2
 800168c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2302      	movs	r3, #2
 8001694:	2181      	movs	r1, #129	; 0x81
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <sht21_read_T_HM+0x80>)
 8001698:	f000 ff9e 	bl	80025d8 <HAL_I2C_Master_Receive>
			1000);
	HAL_Delay(200);
 800169c:	20c8      	movs	r0, #200	; 0xc8
 800169e:	f000 fa75 	bl	8001b8c <HAL_Delay>

	sht21_1->Temperature_Value[0] = sht21_1->T_DATA[0]; //MSB
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	789b      	ldrb	r3, [r3, #2]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	809a      	strh	r2, [r3, #4]
	sht21_1->Temperature_Value[0] = sht21_1->Temperature_Value[0] << 8;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	889b      	ldrh	r3, [r3, #4]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	809a      	strh	r2, [r3, #4]
	sht21_1->Temperature_Value[1] = sht21_1->T_DATA[1]; //LSB
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	78db      	ldrb	r3, [r3, #3]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	80da      	strh	r2, [r3, #6]
	sht21_1->Temperature_Value[1] = sht21_1->Temperature_Value[1]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	88db      	ldrh	r3, [r3, #6]
			& ((uint16_t) LSB_CONFIG);
 80016c6:	f023 030f 	bic.w	r3, r3, #15
 80016ca:	b29a      	uxth	r2, r3
	sht21_1->Temperature_Value[1] = sht21_1->Temperature_Value[1]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	80da      	strh	r2, [r3, #6]
	sht21_1->Temperature = sht21_1->Temperature_Value[0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	889a      	ldrh	r2, [r3, #4]
			| sht21_1->Temperature_Value[1];
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	88db      	ldrh	r3, [r3, #6]
	sht21_1->Temperature = sht21_1->Temperature_Value[0]
 80016d8:	4313      	orrs	r3, r2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	819a      	strh	r2, [r3, #12]

}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000170 	.word	0x20000170
 80016ec:	00000000 	.word	0x00000000

080016f0 <sht21_cal_temp>:

void sht21_cal_temp(SHT21_Handle_t *sht21_1) {
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	sht21_1->son_sicaklik = (-46.85)
			+ (175.2 * (double) sht21_1->Temperature / 65536); //Calculate Temperature
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	899b      	ldrh	r3, [r3, #12]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff01 	bl	8000504 <__aeabi_ui2d>
 8001702:	a314      	add	r3, pc, #80	; (adr r3, 8001754 <sht21_cal_temp+0x64>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe ff76 	bl	80005f8 <__aeabi_dmul>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	4618      	mov	r0, r3
 8001712:	4621      	mov	r1, r4
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <sht21_cal_temp+0x60>)
 800171a:	f7ff f897 	bl	800084c <__aeabi_ddiv>
 800171e:	4603      	mov	r3, r0
 8001720:	460c      	mov	r4, r1
 8001722:	4618      	mov	r0, r3
 8001724:	4621      	mov	r1, r4
 8001726:	a308      	add	r3, pc, #32	; (adr r3, 8001748 <sht21_cal_temp+0x58>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fdac 	bl	8000288 <__aeabi_dsub>
 8001730:	4603      	mov	r3, r0
 8001732:	460c      	mov	r4, r1
	sht21_1->son_sicaklik = (-46.85)
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	bf00      	nop
 8001744:	f3af 8000 	nop.w
 8001748:	cccccccd 	.word	0xcccccccd
 800174c:	40476ccc 	.word	0x40476ccc
 8001750:	40f00000 	.word	0x40f00000
 8001754:	66666666 	.word	0x66666666
 8001758:	4065e666 	.word	0x4065e666

0800175c <sht21_cal_hum>:

void sht21_cal_hum(SHT21_Handle_t *sht21_1) {
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	sht21_1->son_nem = (125 * sht21_1->Humidity / 65536) - 6; //Calculate Humanity
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	89db      	ldrh	r3, [r3, #14]
 8001768:	461a      	mov	r2, r3
 800176a:	4613      	mov	r3, r2
 800176c:	015b      	lsls	r3, r3, #5
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	da02      	bge.n	800177e <sht21_cal_hum+0x22>
 8001778:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800177c:	33ff      	adds	r3, #255	; 0xff
 800177e:	141b      	asrs	r3, r3, #16
 8001780:	3b06      	subs	r3, #6
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fece 	bl	8000524 <__aeabi_i2d>
 8001788:	4603      	mov	r3, r0
 800178a:	460c      	mov	r4, r1
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}

0800179a <Temp_Measure>:

void Temp_Measure(SHT21_Handle_t *sht21_1){
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]

	sht21_start_T_HM();
 80017a2:	f7ff ff07 	bl	80015b4 <sht21_start_T_HM>
	sht21_read_T_HM((SHT21_Handle_t *)sht21_1);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff5e 	bl	8001668 <sht21_read_T_HM>
	sht21_cal_temp ((SHT21_Handle_t *)sht21_1);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff9f 	bl	80016f0 <sht21_cal_temp>

}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <Hum_Measure>:

void Hum_Measure(SHT21_Handle_t *sht21_1){
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]

	sht21_start_RH_HM();
 80017c2:	f7ff fedf 	bl	8001584 <sht21_start_RH_HM>
	sht21_read_RH_HM((SHT21_Handle_t *)sht21_1);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff0c 	bl	80015e4 <sht21_read_RH_HM>
	sht21_cal_hum((SHT21_Handle_t *)sht21_1);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffc5 	bl	800175c <sht21_cal_hum>

}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_MspInit+0x4c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_MspInit+0x4c>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_MspInit+0x4c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_MspInit+0x4c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_MspInit+0x4c>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_MspInit+0x4c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800181a:	2007      	movs	r0, #7
 800181c:	f000 faa8 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_I2C_MspInit+0x84>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d12b      	bne.n	80018a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186a:	23c0      	movs	r3, #192	; 0xc0
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186e:	2312      	movs	r3, #18
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001872:	2301      	movs	r3, #1
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187a:	2304      	movs	r3, #4
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <HAL_I2C_MspInit+0x8c>)
 8001886:	f000 fad7 	bl	8001e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40005400 	.word	0x40005400
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020400 	.word	0x40020400

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_UART_MspInit+0x94>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d134      	bne.n	8001948 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_UART_MspInit+0x98>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <HAL_UART_MspInit+0x98>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_UART_MspInit+0x98>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_UART_MspInit+0x98>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a14      	ldr	r2, [pc, #80]	; (8001954 <HAL_UART_MspInit+0x98>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_UART_MspInit+0x98>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001916:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001928:	2307      	movs	r3, #7
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4809      	ldr	r0, [pc, #36]	; (8001958 <HAL_UART_MspInit+0x9c>)
 8001934:	f000 fa80 	bl	8001e38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2027      	movs	r0, #39	; 0x27
 800193e:	f000 fa22 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001942:	2027      	movs	r0, #39	; 0x27
 8001944:	f000 fa3b 	bl	8001dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40004800 	.word	0x40004800
 8001954:	40023800 	.word	0x40023800
 8001958:	40020400 	.word	0x40020400

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f8cc 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <USART3_IRQHandler+0x14>)
 80019be:	f7ff fc51 	bl	8001264 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019c2:	4802      	ldr	r0, [pc, #8]	; (80019cc <USART3_IRQHandler+0x14>)
 80019c4:	f002 f80c 	bl	80039e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000128 	.word	0x20000128

080019d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <_sbrk+0x50>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x16>
		heap_end = &end;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <_sbrk+0x50>)
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <_sbrk+0x54>)
 80019e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <_sbrk+0x50>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <_sbrk+0x50>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	466a      	mov	r2, sp
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d907      	bls.n	8001a0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019fa:	f002 fdad 	bl	8004558 <__errno>
 80019fe:	4602      	mov	r2, r0
 8001a00:	230c      	movs	r3, #12
 8001a02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
 8001a08:	e006      	b.n	8001a18 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <_sbrk+0x50>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <_sbrk+0x50>)
 8001a14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000011c 	.word	0x2000011c
 8001a24:	20000320 	.word	0x20000320

08001a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <SystemInit+0x28>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <SystemInit+0x28>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SystemInit+0x28>)
 8001a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a42:	609a      	str	r2, [r3, #8]
#endif
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a5a:	e003      	b.n	8001a64 <LoopCopyDataInit>

08001a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a62:	3104      	adds	r1, #4

08001a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a6c:	d3f6      	bcc.n	8001a5c <CopyDataInit>
  ldr  r2, =_sbss
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a70:	e002      	b.n	8001a78 <LoopFillZerobss>

08001a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a74:	f842 3b04 	str.w	r3, [r2], #4

08001a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a7c:	d3f9      	bcc.n	8001a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a7e:	f7ff ffd3 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a82:	f002 fd6f 	bl	8004564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a86:	f7ff fc47 	bl	8001318 <main>
  bx  lr    
 8001a8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a90:	08004fbc 	.word	0x08004fbc
  ldr  r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a98:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001a9c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001aa0:	20000320 	.word	0x20000320

08001aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <HAL_Init+0x40>)
 8001ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <HAL_Init+0x40>)
 8001abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x40>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f94d 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fe7e 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f965 	bl	8001dda <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f92d 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000318 	.word	0x20000318

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000318 	.word	0x20000318

08001b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff ffee 	bl	8001b74 <HAL_GetTick>
 8001b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d005      	beq.n	8001bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_Delay+0x40>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bb2:	bf00      	nop
 8001bb4:	f7ff ffde 	bl	8001b74 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d8f7      	bhi.n	8001bb4 <HAL_Delay+0x28>
  {
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4907      	ldr	r1, [pc, #28]	; (8001c6c <__NVIC_EnableIRQ+0x38>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff29 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff3e 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff8e 	bl	8001cc4 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff31 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffa2 	bl	8001d2c <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e00c      	b.n	8001e2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2205      	movs	r2, #5
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e16b      	b.n	800212c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 815a 	bne.w	8002126 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d00b      	beq.n	8001e92 <HAL_GPIO_Init+0x5a>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e86:	2b11      	cmp	r3, #17
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d130      	bne.n	8001ef4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0xfc>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b12      	cmp	r3, #18
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80b4 	beq.w	8002126 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b5f      	ldr	r3, [pc, #380]	; (8002140 <HAL_GPIO_Init+0x308>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a5e      	ldr	r2, [pc, #376]	; (8002140 <HAL_GPIO_Init+0x308>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b5c      	ldr	r3, [pc, #368]	; (8002140 <HAL_GPIO_Init+0x308>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a5a      	ldr	r2, [pc, #360]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a51      	ldr	r2, [pc, #324]	; (8002148 <HAL_GPIO_Init+0x310>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <HAL_GPIO_Init+0x226>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a50      	ldr	r2, [pc, #320]	; (800214c <HAL_GPIO_Init+0x314>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d025      	beq.n	800205a <HAL_GPIO_Init+0x222>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4f      	ldr	r2, [pc, #316]	; (8002150 <HAL_GPIO_Init+0x318>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01f      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <HAL_GPIO_Init+0x31c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4d      	ldr	r2, [pc, #308]	; (8002158 <HAL_GPIO_Init+0x320>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x216>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4c      	ldr	r2, [pc, #304]	; (800215c <HAL_GPIO_Init+0x324>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x212>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4b      	ldr	r2, [pc, #300]	; (8002160 <HAL_GPIO_Init+0x328>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <HAL_GPIO_Init+0x32c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x20a>
 800203e:	2307      	movs	r3, #7
 8002040:	e00e      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002042:	2308      	movs	r3, #8
 8002044:	e00c      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002046:	2306      	movs	r3, #6
 8002048:	e00a      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204a:	2305      	movs	r3, #5
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204e:	2304      	movs	r3, #4
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4934      	ldr	r1, [pc, #208]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800207e:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <HAL_GPIO_Init+0x330>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a2:	4a31      	ldr	r2, [pc, #196]	; (8002168 <HAL_GPIO_Init+0x330>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <HAL_GPIO_Init+0x330>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020cc:	4a26      	ldr	r2, [pc, #152]	; (8002168 <HAL_GPIO_Init+0x330>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d2:	4b25      	ldr	r3, [pc, #148]	; (8002168 <HAL_GPIO_Init+0x330>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f6:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <HAL_GPIO_Init+0x330>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020fc:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_GPIO_Init+0x330>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <HAL_GPIO_Init+0x330>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f ae90 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	3724      	adds	r7, #36	; 0x24
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40021400 	.word	0x40021400
 8002160:	40021800 	.word	0x40021800
 8002164:	40021c00 	.word	0x40021c00
 8002168:	40013c00 	.word	0x40013c00

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e11f      	b.n	80023be <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fb4a 	bl	800182c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021d0:	f001 fb90 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80021d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a7b      	ldr	r2, [pc, #492]	; (80023c8 <HAL_I2C_Init+0x25c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d807      	bhi.n	80021f0 <HAL_I2C_Init+0x84>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a7a      	ldr	r2, [pc, #488]	; (80023cc <HAL_I2C_Init+0x260>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	bf94      	ite	ls
 80021e8:	2301      	movls	r3, #1
 80021ea:	2300      	movhi	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e006      	b.n	80021fe <HAL_I2C_Init+0x92>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a77      	ldr	r2, [pc, #476]	; (80023d0 <HAL_I2C_Init+0x264>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	bf94      	ite	ls
 80021f8:	2301      	movls	r3, #1
 80021fa:	2300      	movhi	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0db      	b.n	80023be <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4a72      	ldr	r2, [pc, #456]	; (80023d4 <HAL_I2C_Init+0x268>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0c9b      	lsrs	r3, r3, #18
 8002210:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a64      	ldr	r2, [pc, #400]	; (80023c8 <HAL_I2C_Init+0x25c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d802      	bhi.n	8002240 <HAL_I2C_Init+0xd4>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3301      	adds	r3, #1
 800223e:	e009      	b.n	8002254 <HAL_I2C_Init+0xe8>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	4a63      	ldr	r2, [pc, #396]	; (80023d8 <HAL_I2C_Init+0x26c>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	3301      	adds	r3, #1
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	430b      	orrs	r3, r1
 800225a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002266:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4956      	ldr	r1, [pc, #344]	; (80023c8 <HAL_I2C_Init+0x25c>)
 8002270:	428b      	cmp	r3, r1
 8002272:	d80d      	bhi.n	8002290 <HAL_I2C_Init+0x124>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e59      	subs	r1, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	2b04      	cmp	r3, #4
 800228a:	bf38      	it	cc
 800228c:	2304      	movcc	r3, #4
 800228e:	e04f      	b.n	8002330 <HAL_I2C_Init+0x1c4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d111      	bne.n	80022bc <HAL_I2C_Init+0x150>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1e58      	subs	r0, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	e012      	b.n	80022e2 <HAL_I2C_Init+0x176>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e58      	subs	r0, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	0099      	lsls	r1, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Init+0x17e>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e022      	b.n	8002330 <HAL_I2C_Init+0x1c4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10e      	bne.n	8002310 <HAL_I2C_Init+0x1a4>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1e58      	subs	r0, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6859      	ldr	r1, [r3, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	440b      	add	r3, r1
 8002300:	fbb0 f3f3 	udiv	r3, r0, r3
 8002304:	3301      	adds	r3, #1
 8002306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230e:	e00f      	b.n	8002330 <HAL_I2C_Init+0x1c4>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1e58      	subs	r0, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	0099      	lsls	r1, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	fbb0 f3f3 	udiv	r3, r0, r3
 8002326:	3301      	adds	r3, #1
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	6809      	ldr	r1, [r1, #0]
 8002334:	4313      	orrs	r3, r2
 8002336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800235e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6911      	ldr	r1, [r2, #16]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68d2      	ldr	r2, [r2, #12]
 800236a:	4311      	orrs	r1, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	430b      	orrs	r3, r1
 8002372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	000186a0 	.word	0x000186a0
 80023cc:	001e847f 	.word	0x001e847f
 80023d0:	003d08ff 	.word	0x003d08ff
 80023d4:	431bde83 	.word	0x431bde83
 80023d8:	10624dd3 	.word	0x10624dd3

080023dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	461a      	mov	r2, r3
 80023e8:	460b      	mov	r3, r1
 80023ea:	817b      	strh	r3, [r7, #10]
 80023ec:	4613      	mov	r3, r2
 80023ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff fbc0 	bl	8001b74 <HAL_GetTick>
 80023f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b20      	cmp	r3, #32
 8002400:	f040 80e0 	bne.w	80025c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2319      	movs	r3, #25
 800240a:	2201      	movs	r2, #1
 800240c:	4970      	ldr	r1, [pc, #448]	; (80025d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fc58 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800241a:	2302      	movs	r3, #2
 800241c:	e0d3      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_I2C_Master_Transmit+0x50>
 8002428:	2302      	movs	r3, #2
 800242a:	e0cc      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d007      	beq.n	8002452 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002460:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2221      	movs	r2, #33	; 0x21
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2210      	movs	r2, #16
 800246e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	893a      	ldrh	r2, [r7, #8]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4a50      	ldr	r2, [pc, #320]	; (80025d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002494:	8979      	ldrh	r1, [r7, #10]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	6a3a      	ldr	r2, [r7, #32]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fac2 	bl	8002a24 <I2C_MasterRequestWrite>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e08d      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024c0:	e066      	b.n	8002590 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	6a39      	ldr	r1, [r7, #32]
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 fcd2 	bl	8002e70 <I2C_WaitOnTXEFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00d      	beq.n	80024ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d107      	bne.n	80024ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e06b      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b04      	cmp	r3, #4
 800252a:	d11b      	bne.n	8002564 <HAL_I2C_Master_Transmit+0x188>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	2b00      	cmp	r3, #0
 8002532:	d017      	beq.n	8002564 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	6a39      	ldr	r1, [r7, #32]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fcc2 	bl	8002ef2 <I2C_WaitOnBTFFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b04      	cmp	r3, #4
 800257a:	d107      	bne.n	800258c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e01a      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	d194      	bne.n	80024c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e000      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
  }
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	00100002 	.word	0x00100002
 80025d4:	ffff0000 	.word	0xffff0000

080025d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	; 0x30
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	461a      	mov	r2, r3
 80025e4:	460b      	mov	r3, r1
 80025e6:	817b      	strh	r3, [r7, #10]
 80025e8:	4613      	mov	r3, r2
 80025ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff fac2 	bl	8001b74 <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	f040 820b 	bne.w	8002a16 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2319      	movs	r3, #25
 8002606:	2201      	movs	r2, #1
 8002608:	497c      	ldr	r1, [pc, #496]	; (80027fc <HAL_I2C_Master_Receive+0x224>)
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fb5a 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002616:	2302      	movs	r3, #2
 8002618:	e1fe      	b.n	8002a18 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_I2C_Master_Receive+0x50>
 8002624:	2302      	movs	r3, #2
 8002626:	e1f7      	b.n	8002a18 <HAL_I2C_Master_Receive+0x440>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d007      	beq.n	800264e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2222      	movs	r2, #34	; 0x22
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2210      	movs	r2, #16
 800266a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	893a      	ldrh	r2, [r7, #8]
 800267e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a5c      	ldr	r2, [pc, #368]	; (8002800 <HAL_I2C_Master_Receive+0x228>)
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fa46 	bl	8002b28 <I2C_MasterRequestRead>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e1b8      	b.n	8002a18 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d113      	bne.n	80026d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e18c      	b.n	80029f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d11b      	bne.n	8002716 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e16c      	b.n	80029f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	2b02      	cmp	r3, #2
 800271c:	d11b      	bne.n	8002756 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800273c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	e14c      	b.n	80029f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800277c:	e138      	b.n	80029f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002782:	2b03      	cmp	r3, #3
 8002784:	f200 80f1 	bhi.w	800296a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	2b01      	cmp	r3, #1
 800278e:	d123      	bne.n	80027d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fbed 	bl	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e139      	b.n	8002a18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027d6:	e10b      	b.n	80029f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d14e      	bne.n	800287e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e6:	2200      	movs	r2, #0
 80027e8:	4906      	ldr	r1, [pc, #24]	; (8002804 <HAL_I2C_Master_Receive+0x22c>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fa6a 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e10e      	b.n	8002a18 <HAL_I2C_Master_Receive+0x440>
 80027fa:	bf00      	nop
 80027fc:	00100002 	.word	0x00100002
 8002800:	ffff0000 	.word	0xffff0000
 8002804:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800287c:	e0b8      	b.n	80029f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	2200      	movs	r2, #0
 8002886:	4966      	ldr	r1, [pc, #408]	; (8002a20 <HAL_I2C_Master_Receive+0x448>)
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fa1b 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0bf      	b.n	8002a18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	2200      	movs	r2, #0
 80028e2:	494f      	ldr	r1, [pc, #316]	; (8002a20 <HAL_I2C_Master_Receive+0x448>)
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f9ed 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e091      	b.n	8002a18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002968:	e042      	b.n	80029f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fb00 	bl	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e04c      	b.n	8002a18 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d118      	bne.n	80029f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f47f aec2 	bne.w	800277e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3728      	adds	r7, #40	; 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	00010004 	.word	0x00010004

08002a24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	460b      	mov	r3, r1
 8002a32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d006      	beq.n	8002a4e <I2C_MasterRequestWrite+0x2a>
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d003      	beq.n	8002a4e <I2C_MasterRequestWrite+0x2a>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a4c:	d108      	bne.n	8002a60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e00b      	b.n	8002a78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	2b12      	cmp	r3, #18
 8002a66:	d107      	bne.n	8002a78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f91d 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9e:	d103      	bne.n	8002aa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e035      	b.n	8002b18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab4:	d108      	bne.n	8002ac8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ab6:	897b      	ldrh	r3, [r7, #10]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ac4:	611a      	str	r2, [r3, #16]
 8002ac6:	e01b      	b.n	8002b00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ac8:	897b      	ldrh	r3, [r7, #10]
 8002aca:	11db      	asrs	r3, r3, #7
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f003 0306 	and.w	r3, r3, #6
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f063 030f 	orn	r3, r3, #15
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	490e      	ldr	r1, [pc, #56]	; (8002b20 <I2C_MasterRequestWrite+0xfc>)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f943 	bl	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e010      	b.n	8002b18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002af6:	897b      	ldrh	r3, [r7, #10]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4907      	ldr	r1, [pc, #28]	; (8002b24 <I2C_MasterRequestWrite+0x100>)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f933 	bl	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	00010008 	.word	0x00010008
 8002b24:	00010002 	.word	0x00010002

08002b28 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	460b      	mov	r3, r1
 8002b36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d006      	beq.n	8002b62 <I2C_MasterRequestRead+0x3a>
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d003      	beq.n	8002b62 <I2C_MasterRequestRead+0x3a>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b60:	d108      	bne.n	8002b74 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e00b      	b.n	8002b8c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	2b11      	cmp	r3, #17
 8002b7a:	d107      	bne.n	8002b8c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f893 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00d      	beq.n	8002bc0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb2:	d103      	bne.n	8002bbc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e079      	b.n	8002cb4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc8:	d108      	bne.n	8002bdc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bca:	897b      	ldrh	r3, [r7, #10]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]
 8002bda:	e05f      	b.n	8002c9c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bdc:	897b      	ldrh	r3, [r7, #10]
 8002bde:	11db      	asrs	r3, r3, #7
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f003 0306 	and.w	r3, r3, #6
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f063 030f 	orn	r3, r3, #15
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4930      	ldr	r1, [pc, #192]	; (8002cbc <I2C_MasterRequestRead+0x194>)
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f8b9 	bl	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e054      	b.n	8002cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4929      	ldr	r1, [pc, #164]	; (8002cc0 <I2C_MasterRequestRead+0x198>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f8a9 	bl	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e044      	b.n	8002cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f831 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c76:	d103      	bne.n	8002c80 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e017      	b.n	8002cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c84:	897b      	ldrh	r3, [r7, #10]
 8002c86:	11db      	asrs	r3, r3, #7
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f003 0306 	and.w	r3, r3, #6
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f063 030e 	orn	r3, r3, #14
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4907      	ldr	r1, [pc, #28]	; (8002cc0 <I2C_MasterRequestRead+0x198>)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f865 	bl	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	00010008 	.word	0x00010008
 8002cc0:	00010002 	.word	0x00010002

08002cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd4:	e025      	b.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d021      	beq.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe ff49 	bl	8001b74 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d116      	bne.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e023      	b.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10d      	bne.n	8002d48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4013      	ands	r3, r2
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	e00c      	b.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4013      	ands	r3, r2
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d0b6      	beq.n	8002cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d80:	e051      	b.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d90:	d123      	bne.n	8002dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002daa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f043 0204 	orr.w	r2, r3, #4
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e046      	b.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d021      	beq.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7fe fec7 	bl	8001b74 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d116      	bne.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e020      	b.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d10c      	bne.n	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bf14      	ite	ne
 8002e42:	2301      	movne	r3, #1
 8002e44:	2300      	moveq	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	e00b      	b.n	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	43da      	mvns	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d18d      	bne.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e7c:	e02d      	b.n	8002eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f8ce 	bl	8003020 <I2C_IsAcknowledgeFailed>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e02d      	b.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d021      	beq.n	8002eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe fe6d 	bl	8001b74 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e007      	b.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d1ca      	bne.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002efe:	e02d      	b.n	8002f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f88d 	bl	8003020 <I2C_IsAcknowledgeFailed>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e02d      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d021      	beq.n	8002f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f18:	f7fe fe2c 	bl	8001b74 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d302      	bcc.n	8002f2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e007      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d1ca      	bne.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f80:	e042      	b.n	8003008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d119      	bne.n	8002fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0210 	mvn.w	r2, #16
 8002f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e029      	b.n	8003018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc4:	f7fe fdd6 	bl	8001b74 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d302      	bcc.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d116      	bne.n	8003008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e007      	b.n	8003018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d1b5      	bne.n	8002f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003036:	d11b      	bne.n	8003070 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003040:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f043 0204 	orr.w	r2, r3, #4
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e25b      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d075      	beq.n	800318a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800309e:	4ba3      	ldr	r3, [pc, #652]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d00c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030aa:	4ba0      	ldr	r3, [pc, #640]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d112      	bne.n	80030dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b6:	4b9d      	ldr	r3, [pc, #628]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c2:	d10b      	bne.n	80030dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	4b99      	ldr	r3, [pc, #612]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05b      	beq.n	8003188 <HAL_RCC_OscConfig+0x108>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d157      	bne.n	8003188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e236      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x74>
 80030e6:	4b91      	ldr	r3, [pc, #580]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a90      	ldr	r2, [pc, #576]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x98>
 80030fe:	4b8b      	ldr	r3, [pc, #556]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a8a      	ldr	r2, [pc, #552]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a87      	ldr	r2, [pc, #540]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 8003118:	4b84      	ldr	r3, [pc, #528]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a83      	ldr	r2, [pc, #524]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b81      	ldr	r3, [pc, #516]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a80      	ldr	r2, [pc, #512]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe fd1c 	bl	8001b74 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe fd18 	bl	8001b74 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1fb      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xc0>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fe fd08 	bl	8001b74 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe fd04 	bl	8001b74 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1e7      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b6c      	ldr	r3, [pc, #432]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0xe8>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d063      	beq.n	800325e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003196:	4b65      	ldr	r3, [pc, #404]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a2:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d11c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ae:	4b5f      	ldr	r3, [pc, #380]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x152>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1bb      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	4b56      	ldr	r3, [pc, #344]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4952      	ldr	r1, [pc, #328]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	e03a      	b.n	800325e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d020      	beq.n	8003232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f0:	4b4f      	ldr	r3, [pc, #316]	; (8003330 <HAL_RCC_OscConfig+0x2b0>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fe fcbd 	bl	8001b74 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031fe:	f7fe fcb9 	bl	8001b74 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e19c      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4940      	ldr	r1, [pc, #256]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003232:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <HAL_RCC_OscConfig+0x2b0>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fc9c 	bl	8001b74 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003240:	f7fe fc98 	bl	8001b74 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e17b      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d030      	beq.n	80032cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d016      	beq.n	80032a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003272:	4b30      	ldr	r3, [pc, #192]	; (8003334 <HAL_RCC_OscConfig+0x2b4>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe fc7c 	bl	8001b74 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003280:	f7fe fc78 	bl	8001b74 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e15b      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	4b26      	ldr	r3, [pc, #152]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x200>
 800329e:	e015      	b.n	80032cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCC_OscConfig+0x2b4>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a6:	f7fe fc65 	bl	8001b74 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ae:	f7fe fc61 	bl	8001b74 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e144      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80032c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80a0 	beq.w	800341a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10f      	bne.n	800330a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a0e      	ldr	r2, [pc, #56]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003306:	2301      	movs	r3, #1
 8003308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_OscConfig+0x2b8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d121      	bne.n	800335a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_RCC_OscConfig+0x2b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a07      	ldr	r2, [pc, #28]	; (8003338 <HAL_RCC_OscConfig+0x2b8>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003322:	f7fe fc27 	bl	8001b74 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	e011      	b.n	800334e <HAL_RCC_OscConfig+0x2ce>
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	42470000 	.word	0x42470000
 8003334:	42470e80 	.word	0x42470e80
 8003338:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333c:	f7fe fc1a 	bl	8001b74 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e0fd      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334e:	4b81      	ldr	r3, [pc, #516]	; (8003554 <HAL_RCC_OscConfig+0x4d4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d106      	bne.n	8003370 <HAL_RCC_OscConfig+0x2f0>
 8003362:	4b7d      	ldr	r3, [pc, #500]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a7c      	ldr	r2, [pc, #496]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
 800336e:	e01c      	b.n	80033aa <HAL_RCC_OscConfig+0x32a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b05      	cmp	r3, #5
 8003376:	d10c      	bne.n	8003392 <HAL_RCC_OscConfig+0x312>
 8003378:	4b77      	ldr	r3, [pc, #476]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a76      	ldr	r2, [pc, #472]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	4b74      	ldr	r3, [pc, #464]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a73      	ldr	r2, [pc, #460]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
 8003390:	e00b      	b.n	80033aa <HAL_RCC_OscConfig+0x32a>
 8003392:	4b71      	ldr	r3, [pc, #452]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a70      	ldr	r2, [pc, #448]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	4b6e      	ldr	r3, [pc, #440]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a6d      	ldr	r2, [pc, #436]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d015      	beq.n	80033de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b2:	f7fe fbdf 	bl	8001b74 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	e00a      	b.n	80033d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7fe fbdb 	bl	8001b74 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e0bc      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d0:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ee      	beq.n	80033ba <HAL_RCC_OscConfig+0x33a>
 80033dc:	e014      	b.n	8003408 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033de:	f7fe fbc9 	bl	8001b74 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fe fbc5 	bl	8001b74 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e0a6      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fc:	4b56      	ldr	r3, [pc, #344]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ee      	bne.n	80033e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d105      	bne.n	800341a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340e:	4b52      	ldr	r3, [pc, #328]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a51      	ldr	r2, [pc, #324]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 8003414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8092 	beq.w	8003548 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003424:	4b4c      	ldr	r3, [pc, #304]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d05c      	beq.n	80034ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d141      	bne.n	80034bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003438:	4b48      	ldr	r3, [pc, #288]	; (800355c <HAL_RCC_OscConfig+0x4dc>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe fb99 	bl	8001b74 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe fb95 	bl	8001b74 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e078      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003458:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	019b      	lsls	r3, r3, #6
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	3b01      	subs	r3, #1
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	4933      	ldr	r1, [pc, #204]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_RCC_OscConfig+0x4dc>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe fb6e 	bl	8001b74 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe fb6a 	bl	8001b74 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e04d      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x41c>
 80034ba:	e045      	b.n	8003548 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_RCC_OscConfig+0x4dc>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fb57 	bl	8001b74 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe fb53 	bl	8001b74 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e036      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x44a>
 80034e8:	e02e      	b.n	8003548 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e029      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034f6:	4b18      	ldr	r3, [pc, #96]	; (8003558 <HAL_RCC_OscConfig+0x4d8>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	429a      	cmp	r2, r3
 8003508:	d11c      	bne.n	8003544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d115      	bne.n	8003544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800351e:	4013      	ands	r3, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003524:	4293      	cmp	r3, r2
 8003526:	d10d      	bne.n	8003544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d106      	bne.n	8003544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40007000 	.word	0x40007000
 8003558:	40023800 	.word	0x40023800
 800355c:	42470060 	.word	0x42470060

08003560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0cc      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003574:	4b68      	ldr	r3, [pc, #416]	; (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d90c      	bls.n	800359c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b65      	ldr	r3, [pc, #404]	; (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b63      	ldr	r3, [pc, #396]	; (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0b8      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d020      	beq.n	80035ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b4:	4b59      	ldr	r3, [pc, #356]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a58      	ldr	r2, [pc, #352]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035cc:	4b53      	ldr	r3, [pc, #332]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a52      	ldr	r2, [pc, #328]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d8:	4b50      	ldr	r3, [pc, #320]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	494d      	ldr	r1, [pc, #308]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d044      	beq.n	8003680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d119      	bne.n	800363e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e07f      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d003      	beq.n	800361e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800361a:	2b03      	cmp	r3, #3
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06f      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362e:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e067      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 0203 	bic.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4934      	ldr	r1, [pc, #208]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003650:	f7fe fa90 	bl	8001b74 <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	e00a      	b.n	800366e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fe fa8c 	bl	8001b74 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e04f      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 020c 	and.w	r2, r3, #12
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	429a      	cmp	r2, r3
 800367e:	d1eb      	bne.n	8003658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003680:	4b25      	ldr	r3, [pc, #148]	; (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d20c      	bcs.n	80036a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e032      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4916      	ldr	r1, [pc, #88]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	490e      	ldr	r1, [pc, #56]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036e6:	f000 f821 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80036ea:	4601      	mov	r1, r0
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	5cd3      	ldrb	r3, [r2, r3]
 80036fa:	fa21 f303 	lsr.w	r3, r1, r3
 80036fe:	4a09      	ldr	r2, [pc, #36]	; (8003724 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe f9f0 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023c00 	.word	0x40023c00
 800371c:	40023800 	.word	0x40023800
 8003720:	08004f60 	.word	0x08004f60
 8003724:	20000000 	.word	0x20000000
 8003728:	20000004 	.word	0x20000004

0800372c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800372c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	2300      	movs	r3, #0
 800373c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b04      	cmp	r3, #4
 800374c:	d007      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x32>
 800374e:	2b08      	cmp	r3, #8
 8003750:	d008      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x38>
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 80b4 	bne.w	80038c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b5e      	ldr	r3, [pc, #376]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800375a:	60bb      	str	r3, [r7, #8]
       break;
 800375c:	e0b3      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375e:	4b5e      	ldr	r3, [pc, #376]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003760:	60bb      	str	r3, [r7, #8]
      break;
 8003762:	e0b0      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003764:	4b5a      	ldr	r3, [pc, #360]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800376c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376e:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d04a      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377a:	4b55      	ldr	r3, [pc, #340]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	f04f 0400 	mov.w	r4, #0
 8003784:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	ea03 0501 	and.w	r5, r3, r1
 8003790:	ea04 0602 	and.w	r6, r4, r2
 8003794:	4629      	mov	r1, r5
 8003796:	4632      	mov	r2, r6
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	f04f 0400 	mov.w	r4, #0
 80037a0:	0154      	lsls	r4, r2, #5
 80037a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037a6:	014b      	lsls	r3, r1, #5
 80037a8:	4619      	mov	r1, r3
 80037aa:	4622      	mov	r2, r4
 80037ac:	1b49      	subs	r1, r1, r5
 80037ae:	eb62 0206 	sbc.w	r2, r2, r6
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	f04f 0400 	mov.w	r4, #0
 80037ba:	0194      	lsls	r4, r2, #6
 80037bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037c0:	018b      	lsls	r3, r1, #6
 80037c2:	1a5b      	subs	r3, r3, r1
 80037c4:	eb64 0402 	sbc.w	r4, r4, r2
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	00e2      	lsls	r2, r4, #3
 80037d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037d6:	00d9      	lsls	r1, r3, #3
 80037d8:	460b      	mov	r3, r1
 80037da:	4614      	mov	r4, r2
 80037dc:	195b      	adds	r3, r3, r5
 80037de:	eb44 0406 	adc.w	r4, r4, r6
 80037e2:	f04f 0100 	mov.w	r1, #0
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	0262      	lsls	r2, r4, #9
 80037ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037f0:	0259      	lsls	r1, r3, #9
 80037f2:	460b      	mov	r3, r1
 80037f4:	4614      	mov	r4, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	4621      	mov	r1, r4
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f04f 0400 	mov.w	r4, #0
 8003800:	461a      	mov	r2, r3
 8003802:	4623      	mov	r3, r4
 8003804:	f7fd f92a 	bl	8000a5c <__aeabi_uldivmod>
 8003808:	4603      	mov	r3, r0
 800380a:	460c      	mov	r4, r1
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e049      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003810:	4b2f      	ldr	r3, [pc, #188]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	099b      	lsrs	r3, r3, #6
 8003816:	f04f 0400 	mov.w	r4, #0
 800381a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	ea03 0501 	and.w	r5, r3, r1
 8003826:	ea04 0602 	and.w	r6, r4, r2
 800382a:	4629      	mov	r1, r5
 800382c:	4632      	mov	r2, r6
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	f04f 0400 	mov.w	r4, #0
 8003836:	0154      	lsls	r4, r2, #5
 8003838:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800383c:	014b      	lsls	r3, r1, #5
 800383e:	4619      	mov	r1, r3
 8003840:	4622      	mov	r2, r4
 8003842:	1b49      	subs	r1, r1, r5
 8003844:	eb62 0206 	sbc.w	r2, r2, r6
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	f04f 0400 	mov.w	r4, #0
 8003850:	0194      	lsls	r4, r2, #6
 8003852:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003856:	018b      	lsls	r3, r1, #6
 8003858:	1a5b      	subs	r3, r3, r1
 800385a:	eb64 0402 	sbc.w	r4, r4, r2
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	00e2      	lsls	r2, r4, #3
 8003868:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800386c:	00d9      	lsls	r1, r3, #3
 800386e:	460b      	mov	r3, r1
 8003870:	4614      	mov	r4, r2
 8003872:	195b      	adds	r3, r3, r5
 8003874:	eb44 0406 	adc.w	r4, r4, r6
 8003878:	f04f 0100 	mov.w	r1, #0
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	02a2      	lsls	r2, r4, #10
 8003882:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003886:	0299      	lsls	r1, r3, #10
 8003888:	460b      	mov	r3, r1
 800388a:	4614      	mov	r4, r2
 800388c:	4618      	mov	r0, r3
 800388e:	4621      	mov	r1, r4
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f04f 0400 	mov.w	r4, #0
 8003896:	461a      	mov	r2, r3
 8003898:	4623      	mov	r3, r4
 800389a:	f7fd f8df 	bl	8000a5c <__aeabi_uldivmod>
 800389e:	4603      	mov	r3, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	3301      	adds	r3, #1
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	60bb      	str	r3, [r7, #8]
      break;
 80038be:	e002      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038c2:	60bb      	str	r3, [r7, #8]
      break;
 80038c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c6:	68bb      	ldr	r3, [r7, #8]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	007a1200 	.word	0x007a1200

080038dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000000 	.word	0x20000000

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038f8:	f7ff fff0 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 80038fc:	4601      	mov	r1, r0
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0a9b      	lsrs	r3, r3, #10
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4a03      	ldr	r2, [pc, #12]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	08004f70 	.word	0x08004f70

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003920:	f7ff ffdc 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003924:	4601      	mov	r1, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0b5b      	lsrs	r3, r3, #13
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4a03      	ldr	r2, [pc, #12]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	08004f70 	.word	0x08004f70

08003944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e03f      	b.n	80039d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd ffa6 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2224      	movs	r2, #36	; 0x24
 8003974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fa69 	bl	8003e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800399c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10d      	bne.n	8003a32 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_UART_IRQHandler+0x52>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f996 	bl	8003d5c <UART_Receive_IT>
      return;
 8003a30:	e0d1      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80b0 	beq.w	8003b9a <HAL_UART_IRQHandler+0x1ba>
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <HAL_UART_IRQHandler+0x70>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80a5 	beq.w	8003b9a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_UART_IRQHandler+0x90>
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	f043 0201 	orr.w	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_UART_IRQHandler+0xb0>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	f043 0202 	orr.w	r2, r3, #2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_UART_IRQHandler+0xd0>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	f043 0204 	orr.w	r2, r3, #4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00f      	beq.n	8003ada <HAL_UART_IRQHandler+0xfa>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <HAL_UART_IRQHandler+0xee>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	f043 0208 	orr.w	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d078      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <HAL_UART_IRQHandler+0x11c>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f930 	bl	8003d5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	bf0c      	ite	eq
 8003b0a:	2301      	moveq	r3, #1
 8003b0c:	2300      	movne	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <HAL_UART_IRQHandler+0x144>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d031      	beq.n	8003b88 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f879 	bl	8003c1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d123      	bne.n	8003b80 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b46:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	4a21      	ldr	r2, [pc, #132]	; (8003bdc <HAL_UART_IRQHandler+0x1fc>)
 8003b56:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe f948 	bl	8001df2 <HAL_DMA_Abort_IT>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d016      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b72:	4610      	mov	r0, r2
 8003b74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b76:	e00e      	b.n	8003b96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f845 	bl	8003c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7e:	e00a      	b.n	8003b96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f841 	bl	8003c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b86:	e006      	b.n	8003b96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f83d 	bl	8003c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003b94:	e01e      	b.n	8003bd4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b96:	bf00      	nop
    return;
 8003b98:	e01c      	b.n	8003bd4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x1d6>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f866 	bl	8003c80 <UART_Transmit_IT>
    return;
 8003bb4:	e00f      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x1f6>
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f8ae 	bl	8003d2c <UART_EndTransmit_IT>
    return;
 8003bd0:	bf00      	nop
 8003bd2:	e000      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003bd4:	bf00      	nop
  }
}
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	08003c59 	.word	0x08003c59

08003be0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff ffc8 	bl	8003c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b21      	cmp	r3, #33	; 0x21
 8003c92:	d144      	bne.n	8003d1e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9c:	d11a      	bne.n	8003cd4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	1c9a      	adds	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	621a      	str	r2, [r3, #32]
 8003cc6:	e00e      	b.n	8003ce6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	621a      	str	r2, [r3, #32]
 8003cd2:	e008      	b.n	8003ce6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	1c59      	adds	r1, r3, #1
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6211      	str	r1, [r2, #32]
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff47 	bl	8003be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b22      	cmp	r3, #34	; 0x22
 8003d6e:	d171      	bne.n	8003e54 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d78:	d123      	bne.n	8003dc2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10e      	bne.n	8003da6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	1c9a      	adds	r2, r3, #2
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
 8003da4:	e029      	b.n	8003dfa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc0:	e01b      	b.n	8003dfa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6858      	ldr	r0, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	1c59      	adds	r1, r3, #1
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6291      	str	r1, [r2, #40]	; 0x28
 8003dda:	b2c2      	uxtb	r2, r0
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e00c      	b.n	8003dfa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	1c58      	adds	r0, r3, #1
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	6288      	str	r0, [r1, #40]	; 0x28
 8003df2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4619      	mov	r1, r3
 8003e08:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d120      	bne.n	8003e50 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0220 	bic.w	r2, r2, #32
 8003e1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fed4 	bl	8003bf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e002      	b.n	8003e56 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e000      	b.n	8003e56 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
  }
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ea2:	f023 030c 	bic.w	r3, r3, #12
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	f040 818b 	bne.w	80041e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4ac1      	ldr	r2, [pc, #772]	; (80041dc <UART_SetConfig+0x37c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d005      	beq.n	8003ee8 <UART_SetConfig+0x88>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4abf      	ldr	r2, [pc, #764]	; (80041e0 <UART_SetConfig+0x380>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	f040 80bd 	bne.w	8004062 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ee8:	f7ff fd18 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8003eec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	461d      	mov	r5, r3
 8003ef2:	f04f 0600 	mov.w	r6, #0
 8003ef6:	46a8      	mov	r8, r5
 8003ef8:	46b1      	mov	r9, r6
 8003efa:	eb18 0308 	adds.w	r3, r8, r8
 8003efe:	eb49 0409 	adc.w	r4, r9, r9
 8003f02:	4698      	mov	r8, r3
 8003f04:	46a1      	mov	r9, r4
 8003f06:	eb18 0805 	adds.w	r8, r8, r5
 8003f0a:	eb49 0906 	adc.w	r9, r9, r6
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f22:	4688      	mov	r8, r1
 8003f24:	4691      	mov	r9, r2
 8003f26:	eb18 0005 	adds.w	r0, r8, r5
 8003f2a:	eb49 0106 	adc.w	r1, r9, r6
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	461d      	mov	r5, r3
 8003f34:	f04f 0600 	mov.w	r6, #0
 8003f38:	196b      	adds	r3, r5, r5
 8003f3a:	eb46 0406 	adc.w	r4, r6, r6
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4623      	mov	r3, r4
 8003f42:	f7fc fd8b 	bl	8000a5c <__aeabi_uldivmod>
 8003f46:	4603      	mov	r3, r0
 8003f48:	460c      	mov	r4, r1
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4ba5      	ldr	r3, [pc, #660]	; (80041e4 <UART_SetConfig+0x384>)
 8003f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	461d      	mov	r5, r3
 8003f5c:	f04f 0600 	mov.w	r6, #0
 8003f60:	46a9      	mov	r9, r5
 8003f62:	46b2      	mov	sl, r6
 8003f64:	eb19 0309 	adds.w	r3, r9, r9
 8003f68:	eb4a 040a 	adc.w	r4, sl, sl
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	46a2      	mov	sl, r4
 8003f70:	eb19 0905 	adds.w	r9, r9, r5
 8003f74:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f8c:	4689      	mov	r9, r1
 8003f8e:	4692      	mov	sl, r2
 8003f90:	eb19 0005 	adds.w	r0, r9, r5
 8003f94:	eb4a 0106 	adc.w	r1, sl, r6
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	461d      	mov	r5, r3
 8003f9e:	f04f 0600 	mov.w	r6, #0
 8003fa2:	196b      	adds	r3, r5, r5
 8003fa4:	eb46 0406 	adc.w	r4, r6, r6
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	f7fc fd56 	bl	8000a5c <__aeabi_uldivmod>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4b8b      	ldr	r3, [pc, #556]	; (80041e4 <UART_SetConfig+0x384>)
 8003fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	2164      	movs	r1, #100	; 0x64
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	3332      	adds	r3, #50	; 0x32
 8003fca:	4a86      	ldr	r2, [pc, #536]	; (80041e4 <UART_SetConfig+0x384>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fd8:	4498      	add	r8, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	461d      	mov	r5, r3
 8003fde:	f04f 0600 	mov.w	r6, #0
 8003fe2:	46a9      	mov	r9, r5
 8003fe4:	46b2      	mov	sl, r6
 8003fe6:	eb19 0309 	adds.w	r3, r9, r9
 8003fea:	eb4a 040a 	adc.w	r4, sl, sl
 8003fee:	4699      	mov	r9, r3
 8003ff0:	46a2      	mov	sl, r4
 8003ff2:	eb19 0905 	adds.w	r9, r9, r5
 8003ff6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ffa:	f04f 0100 	mov.w	r1, #0
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004006:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800400a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800400e:	4689      	mov	r9, r1
 8004010:	4692      	mov	sl, r2
 8004012:	eb19 0005 	adds.w	r0, r9, r5
 8004016:	eb4a 0106 	adc.w	r1, sl, r6
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	461d      	mov	r5, r3
 8004020:	f04f 0600 	mov.w	r6, #0
 8004024:	196b      	adds	r3, r5, r5
 8004026:	eb46 0406 	adc.w	r4, r6, r6
 800402a:	461a      	mov	r2, r3
 800402c:	4623      	mov	r3, r4
 800402e:	f7fc fd15 	bl	8000a5c <__aeabi_uldivmod>
 8004032:	4603      	mov	r3, r0
 8004034:	460c      	mov	r4, r1
 8004036:	461a      	mov	r2, r3
 8004038:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <UART_SetConfig+0x384>)
 800403a:	fba3 1302 	umull	r1, r3, r3, r2
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2164      	movs	r1, #100	; 0x64
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	3332      	adds	r3, #50	; 0x32
 800404c:	4a65      	ldr	r2, [pc, #404]	; (80041e4 <UART_SetConfig+0x384>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	f003 0207 	and.w	r2, r3, #7
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4442      	add	r2, r8
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	e26f      	b.n	8004542 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004062:	f7ff fc47 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004066:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	461d      	mov	r5, r3
 800406c:	f04f 0600 	mov.w	r6, #0
 8004070:	46a8      	mov	r8, r5
 8004072:	46b1      	mov	r9, r6
 8004074:	eb18 0308 	adds.w	r3, r8, r8
 8004078:	eb49 0409 	adc.w	r4, r9, r9
 800407c:	4698      	mov	r8, r3
 800407e:	46a1      	mov	r9, r4
 8004080:	eb18 0805 	adds.w	r8, r8, r5
 8004084:	eb49 0906 	adc.w	r9, r9, r6
 8004088:	f04f 0100 	mov.w	r1, #0
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004094:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004098:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800409c:	4688      	mov	r8, r1
 800409e:	4691      	mov	r9, r2
 80040a0:	eb18 0005 	adds.w	r0, r8, r5
 80040a4:	eb49 0106 	adc.w	r1, r9, r6
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	461d      	mov	r5, r3
 80040ae:	f04f 0600 	mov.w	r6, #0
 80040b2:	196b      	adds	r3, r5, r5
 80040b4:	eb46 0406 	adc.w	r4, r6, r6
 80040b8:	461a      	mov	r2, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	f7fc fcce 	bl	8000a5c <__aeabi_uldivmod>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b47      	ldr	r3, [pc, #284]	; (80041e4 <UART_SetConfig+0x384>)
 80040c8:	fba3 2302 	umull	r2, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	461d      	mov	r5, r3
 80040d6:	f04f 0600 	mov.w	r6, #0
 80040da:	46a9      	mov	r9, r5
 80040dc:	46b2      	mov	sl, r6
 80040de:	eb19 0309 	adds.w	r3, r9, r9
 80040e2:	eb4a 040a 	adc.w	r4, sl, sl
 80040e6:	4699      	mov	r9, r3
 80040e8:	46a2      	mov	sl, r4
 80040ea:	eb19 0905 	adds.w	r9, r9, r5
 80040ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004102:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004106:	4689      	mov	r9, r1
 8004108:	4692      	mov	sl, r2
 800410a:	eb19 0005 	adds.w	r0, r9, r5
 800410e:	eb4a 0106 	adc.w	r1, sl, r6
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	461d      	mov	r5, r3
 8004118:	f04f 0600 	mov.w	r6, #0
 800411c:	196b      	adds	r3, r5, r5
 800411e:	eb46 0406 	adc.w	r4, r6, r6
 8004122:	461a      	mov	r2, r3
 8004124:	4623      	mov	r3, r4
 8004126:	f7fc fc99 	bl	8000a5c <__aeabi_uldivmod>
 800412a:	4603      	mov	r3, r0
 800412c:	460c      	mov	r4, r1
 800412e:	461a      	mov	r2, r3
 8004130:	4b2c      	ldr	r3, [pc, #176]	; (80041e4 <UART_SetConfig+0x384>)
 8004132:	fba3 1302 	umull	r1, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2164      	movs	r1, #100	; 0x64
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	3332      	adds	r3, #50	; 0x32
 8004144:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <UART_SetConfig+0x384>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004152:	4498      	add	r8, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	461d      	mov	r5, r3
 8004158:	f04f 0600 	mov.w	r6, #0
 800415c:	46a9      	mov	r9, r5
 800415e:	46b2      	mov	sl, r6
 8004160:	eb19 0309 	adds.w	r3, r9, r9
 8004164:	eb4a 040a 	adc.w	r4, sl, sl
 8004168:	4699      	mov	r9, r3
 800416a:	46a2      	mov	sl, r4
 800416c:	eb19 0905 	adds.w	r9, r9, r5
 8004170:	eb4a 0a06 	adc.w	sl, sl, r6
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004188:	4689      	mov	r9, r1
 800418a:	4692      	mov	sl, r2
 800418c:	eb19 0005 	adds.w	r0, r9, r5
 8004190:	eb4a 0106 	adc.w	r1, sl, r6
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	461d      	mov	r5, r3
 800419a:	f04f 0600 	mov.w	r6, #0
 800419e:	196b      	adds	r3, r5, r5
 80041a0:	eb46 0406 	adc.w	r4, r6, r6
 80041a4:	461a      	mov	r2, r3
 80041a6:	4623      	mov	r3, r4
 80041a8:	f7fc fc58 	bl	8000a5c <__aeabi_uldivmod>
 80041ac:	4603      	mov	r3, r0
 80041ae:	460c      	mov	r4, r1
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <UART_SetConfig+0x384>)
 80041b4:	fba3 1302 	umull	r1, r3, r3, r2
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	2164      	movs	r1, #100	; 0x64
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	3332      	adds	r3, #50	; 0x32
 80041c6:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <UART_SetConfig+0x384>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	f003 0207 	and.w	r2, r3, #7
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4442      	add	r2, r8
 80041d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041da:	e1b2      	b.n	8004542 <UART_SetConfig+0x6e2>
 80041dc:	40011000 	.word	0x40011000
 80041e0:	40011400 	.word	0x40011400
 80041e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4ad7      	ldr	r2, [pc, #860]	; (800454c <UART_SetConfig+0x6ec>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d005      	beq.n	80041fe <UART_SetConfig+0x39e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4ad6      	ldr	r2, [pc, #856]	; (8004550 <UART_SetConfig+0x6f0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	f040 80d1 	bne.w	80043a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80041fe:	f7ff fb8d 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8004202:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	469a      	mov	sl, r3
 8004208:	f04f 0b00 	mov.w	fp, #0
 800420c:	46d0      	mov	r8, sl
 800420e:	46d9      	mov	r9, fp
 8004210:	eb18 0308 	adds.w	r3, r8, r8
 8004214:	eb49 0409 	adc.w	r4, r9, r9
 8004218:	4698      	mov	r8, r3
 800421a:	46a1      	mov	r9, r4
 800421c:	eb18 080a 	adds.w	r8, r8, sl
 8004220:	eb49 090b 	adc.w	r9, r9, fp
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004230:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004234:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004238:	4688      	mov	r8, r1
 800423a:	4691      	mov	r9, r2
 800423c:	eb1a 0508 	adds.w	r5, sl, r8
 8004240:	eb4b 0609 	adc.w	r6, fp, r9
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4619      	mov	r1, r3
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	f04f 0400 	mov.w	r4, #0
 8004256:	0094      	lsls	r4, r2, #2
 8004258:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800425c:	008b      	lsls	r3, r1, #2
 800425e:	461a      	mov	r2, r3
 8004260:	4623      	mov	r3, r4
 8004262:	4628      	mov	r0, r5
 8004264:	4631      	mov	r1, r6
 8004266:	f7fc fbf9 	bl	8000a5c <__aeabi_uldivmod>
 800426a:	4603      	mov	r3, r0
 800426c:	460c      	mov	r4, r1
 800426e:	461a      	mov	r2, r3
 8004270:	4bb8      	ldr	r3, [pc, #736]	; (8004554 <UART_SetConfig+0x6f4>)
 8004272:	fba3 2302 	umull	r2, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	469b      	mov	fp, r3
 8004280:	f04f 0c00 	mov.w	ip, #0
 8004284:	46d9      	mov	r9, fp
 8004286:	46e2      	mov	sl, ip
 8004288:	eb19 0309 	adds.w	r3, r9, r9
 800428c:	eb4a 040a 	adc.w	r4, sl, sl
 8004290:	4699      	mov	r9, r3
 8004292:	46a2      	mov	sl, r4
 8004294:	eb19 090b 	adds.w	r9, r9, fp
 8004298:	eb4a 0a0c 	adc.w	sl, sl, ip
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042b0:	4689      	mov	r9, r1
 80042b2:	4692      	mov	sl, r2
 80042b4:	eb1b 0509 	adds.w	r5, fp, r9
 80042b8:	eb4c 060a 	adc.w	r6, ip, sl
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4619      	mov	r1, r3
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	0094      	lsls	r4, r2, #2
 80042d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042d4:	008b      	lsls	r3, r1, #2
 80042d6:	461a      	mov	r2, r3
 80042d8:	4623      	mov	r3, r4
 80042da:	4628      	mov	r0, r5
 80042dc:	4631      	mov	r1, r6
 80042de:	f7fc fbbd 	bl	8000a5c <__aeabi_uldivmod>
 80042e2:	4603      	mov	r3, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b9a      	ldr	r3, [pc, #616]	; (8004554 <UART_SetConfig+0x6f4>)
 80042ea:	fba3 1302 	umull	r1, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2164      	movs	r1, #100	; 0x64
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	3332      	adds	r3, #50	; 0x32
 80042fc:	4a95      	ldr	r2, [pc, #596]	; (8004554 <UART_SetConfig+0x6f4>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004308:	4498      	add	r8, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	469b      	mov	fp, r3
 800430e:	f04f 0c00 	mov.w	ip, #0
 8004312:	46d9      	mov	r9, fp
 8004314:	46e2      	mov	sl, ip
 8004316:	eb19 0309 	adds.w	r3, r9, r9
 800431a:	eb4a 040a 	adc.w	r4, sl, sl
 800431e:	4699      	mov	r9, r3
 8004320:	46a2      	mov	sl, r4
 8004322:	eb19 090b 	adds.w	r9, r9, fp
 8004326:	eb4a 0a0c 	adc.w	sl, sl, ip
 800432a:	f04f 0100 	mov.w	r1, #0
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800433a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800433e:	4689      	mov	r9, r1
 8004340:	4692      	mov	sl, r2
 8004342:	eb1b 0509 	adds.w	r5, fp, r9
 8004346:	eb4c 060a 	adc.w	r6, ip, sl
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4619      	mov	r1, r3
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	f04f 0400 	mov.w	r4, #0
 800435c:	0094      	lsls	r4, r2, #2
 800435e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004362:	008b      	lsls	r3, r1, #2
 8004364:	461a      	mov	r2, r3
 8004366:	4623      	mov	r3, r4
 8004368:	4628      	mov	r0, r5
 800436a:	4631      	mov	r1, r6
 800436c:	f7fc fb76 	bl	8000a5c <__aeabi_uldivmod>
 8004370:	4603      	mov	r3, r0
 8004372:	460c      	mov	r4, r1
 8004374:	461a      	mov	r2, r3
 8004376:	4b77      	ldr	r3, [pc, #476]	; (8004554 <UART_SetConfig+0x6f4>)
 8004378:	fba3 1302 	umull	r1, r3, r3, r2
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	2164      	movs	r1, #100	; 0x64
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	3332      	adds	r3, #50	; 0x32
 800438a:	4a72      	ldr	r2, [pc, #456]	; (8004554 <UART_SetConfig+0x6f4>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f003 020f 	and.w	r2, r3, #15
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4442      	add	r2, r8
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	e0d0      	b.n	8004542 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043a0:	f7ff faa8 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80043a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	469a      	mov	sl, r3
 80043aa:	f04f 0b00 	mov.w	fp, #0
 80043ae:	46d0      	mov	r8, sl
 80043b0:	46d9      	mov	r9, fp
 80043b2:	eb18 0308 	adds.w	r3, r8, r8
 80043b6:	eb49 0409 	adc.w	r4, r9, r9
 80043ba:	4698      	mov	r8, r3
 80043bc:	46a1      	mov	r9, r4
 80043be:	eb18 080a 	adds.w	r8, r8, sl
 80043c2:	eb49 090b 	adc.w	r9, r9, fp
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043da:	4688      	mov	r8, r1
 80043dc:	4691      	mov	r9, r2
 80043de:	eb1a 0508 	adds.w	r5, sl, r8
 80043e2:	eb4b 0609 	adc.w	r6, fp, r9
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4619      	mov	r1, r3
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	f04f 0400 	mov.w	r4, #0
 80043f8:	0094      	lsls	r4, r2, #2
 80043fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043fe:	008b      	lsls	r3, r1, #2
 8004400:	461a      	mov	r2, r3
 8004402:	4623      	mov	r3, r4
 8004404:	4628      	mov	r0, r5
 8004406:	4631      	mov	r1, r6
 8004408:	f7fc fb28 	bl	8000a5c <__aeabi_uldivmod>
 800440c:	4603      	mov	r3, r0
 800440e:	460c      	mov	r4, r1
 8004410:	461a      	mov	r2, r3
 8004412:	4b50      	ldr	r3, [pc, #320]	; (8004554 <UART_SetConfig+0x6f4>)
 8004414:	fba3 2302 	umull	r2, r3, r3, r2
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	469b      	mov	fp, r3
 8004422:	f04f 0c00 	mov.w	ip, #0
 8004426:	46d9      	mov	r9, fp
 8004428:	46e2      	mov	sl, ip
 800442a:	eb19 0309 	adds.w	r3, r9, r9
 800442e:	eb4a 040a 	adc.w	r4, sl, sl
 8004432:	4699      	mov	r9, r3
 8004434:	46a2      	mov	sl, r4
 8004436:	eb19 090b 	adds.w	r9, r9, fp
 800443a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800444a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800444e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004452:	4689      	mov	r9, r1
 8004454:	4692      	mov	sl, r2
 8004456:	eb1b 0509 	adds.w	r5, fp, r9
 800445a:	eb4c 060a 	adc.w	r6, ip, sl
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4619      	mov	r1, r3
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	f04f 0400 	mov.w	r4, #0
 8004470:	0094      	lsls	r4, r2, #2
 8004472:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004476:	008b      	lsls	r3, r1, #2
 8004478:	461a      	mov	r2, r3
 800447a:	4623      	mov	r3, r4
 800447c:	4628      	mov	r0, r5
 800447e:	4631      	mov	r1, r6
 8004480:	f7fc faec 	bl	8000a5c <__aeabi_uldivmod>
 8004484:	4603      	mov	r3, r0
 8004486:	460c      	mov	r4, r1
 8004488:	461a      	mov	r2, r3
 800448a:	4b32      	ldr	r3, [pc, #200]	; (8004554 <UART_SetConfig+0x6f4>)
 800448c:	fba3 1302 	umull	r1, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2164      	movs	r1, #100	; 0x64
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	3332      	adds	r3, #50	; 0x32
 800449e:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <UART_SetConfig+0x6f4>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044aa:	4498      	add	r8, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	469b      	mov	fp, r3
 80044b0:	f04f 0c00 	mov.w	ip, #0
 80044b4:	46d9      	mov	r9, fp
 80044b6:	46e2      	mov	sl, ip
 80044b8:	eb19 0309 	adds.w	r3, r9, r9
 80044bc:	eb4a 040a 	adc.w	r4, sl, sl
 80044c0:	4699      	mov	r9, r3
 80044c2:	46a2      	mov	sl, r4
 80044c4:	eb19 090b 	adds.w	r9, r9, fp
 80044c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044cc:	f04f 0100 	mov.w	r1, #0
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044e0:	4689      	mov	r9, r1
 80044e2:	4692      	mov	sl, r2
 80044e4:	eb1b 0509 	adds.w	r5, fp, r9
 80044e8:	eb4c 060a 	adc.w	r6, ip, sl
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4619      	mov	r1, r3
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	f04f 0400 	mov.w	r4, #0
 80044fe:	0094      	lsls	r4, r2, #2
 8004500:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004504:	008b      	lsls	r3, r1, #2
 8004506:	461a      	mov	r2, r3
 8004508:	4623      	mov	r3, r4
 800450a:	4628      	mov	r0, r5
 800450c:	4631      	mov	r1, r6
 800450e:	f7fc faa5 	bl	8000a5c <__aeabi_uldivmod>
 8004512:	4603      	mov	r3, r0
 8004514:	460c      	mov	r4, r1
 8004516:	461a      	mov	r2, r3
 8004518:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <UART_SetConfig+0x6f4>)
 800451a:	fba3 1302 	umull	r1, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2164      	movs	r1, #100	; 0x64
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	3332      	adds	r3, #50	; 0x32
 800452c:	4a09      	ldr	r2, [pc, #36]	; (8004554 <UART_SetConfig+0x6f4>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4442      	add	r2, r8
 800453e:	609a      	str	r2, [r3, #8]
}
 8004540:	e7ff      	b.n	8004542 <UART_SetConfig+0x6e2>
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454c:	40011000 	.word	0x40011000
 8004550:	40011400 	.word	0x40011400
 8004554:	51eb851f 	.word	0x51eb851f

08004558 <__errno>:
 8004558:	4b01      	ldr	r3, [pc, #4]	; (8004560 <__errno+0x8>)
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	2000000c 	.word	0x2000000c

08004564 <__libc_init_array>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	4e0d      	ldr	r6, [pc, #52]	; (800459c <__libc_init_array+0x38>)
 8004568:	4c0d      	ldr	r4, [pc, #52]	; (80045a0 <__libc_init_array+0x3c>)
 800456a:	1ba4      	subs	r4, r4, r6
 800456c:	10a4      	asrs	r4, r4, #2
 800456e:	2500      	movs	r5, #0
 8004570:	42a5      	cmp	r5, r4
 8004572:	d109      	bne.n	8004588 <__libc_init_array+0x24>
 8004574:	4e0b      	ldr	r6, [pc, #44]	; (80045a4 <__libc_init_array+0x40>)
 8004576:	4c0c      	ldr	r4, [pc, #48]	; (80045a8 <__libc_init_array+0x44>)
 8004578:	f000 fc36 	bl	8004de8 <_init>
 800457c:	1ba4      	subs	r4, r4, r6
 800457e:	10a4      	asrs	r4, r4, #2
 8004580:	2500      	movs	r5, #0
 8004582:	42a5      	cmp	r5, r4
 8004584:	d105      	bne.n	8004592 <__libc_init_array+0x2e>
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800458c:	4798      	blx	r3
 800458e:	3501      	adds	r5, #1
 8004590:	e7ee      	b.n	8004570 <__libc_init_array+0xc>
 8004592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004596:	4798      	blx	r3
 8004598:	3501      	adds	r5, #1
 800459a:	e7f2      	b.n	8004582 <__libc_init_array+0x1e>
 800459c:	08004fb4 	.word	0x08004fb4
 80045a0:	08004fb4 	.word	0x08004fb4
 80045a4:	08004fb4 	.word	0x08004fb4
 80045a8:	08004fb8 	.word	0x08004fb8

080045ac <memset>:
 80045ac:	4402      	add	r2, r0
 80045ae:	4603      	mov	r3, r0
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d100      	bne.n	80045b6 <memset+0xa>
 80045b4:	4770      	bx	lr
 80045b6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ba:	e7f9      	b.n	80045b0 <memset+0x4>

080045bc <siprintf>:
 80045bc:	b40e      	push	{r1, r2, r3}
 80045be:	b500      	push	{lr}
 80045c0:	b09c      	sub	sp, #112	; 0x70
 80045c2:	ab1d      	add	r3, sp, #116	; 0x74
 80045c4:	9002      	str	r0, [sp, #8]
 80045c6:	9006      	str	r0, [sp, #24]
 80045c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045cc:	4809      	ldr	r0, [pc, #36]	; (80045f4 <siprintf+0x38>)
 80045ce:	9107      	str	r1, [sp, #28]
 80045d0:	9104      	str	r1, [sp, #16]
 80045d2:	4909      	ldr	r1, [pc, #36]	; (80045f8 <siprintf+0x3c>)
 80045d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045d8:	9105      	str	r1, [sp, #20]
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	a902      	add	r1, sp, #8
 80045e0:	f000 f876 	bl	80046d0 <_svfiprintf_r>
 80045e4:	9b02      	ldr	r3, [sp, #8]
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	b01c      	add	sp, #112	; 0x70
 80045ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80045f0:	b003      	add	sp, #12
 80045f2:	4770      	bx	lr
 80045f4:	2000000c 	.word	0x2000000c
 80045f8:	ffff0208 	.word	0xffff0208

080045fc <strcat>:
 80045fc:	b510      	push	{r4, lr}
 80045fe:	4603      	mov	r3, r0
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	1c5c      	adds	r4, r3, #1
 8004604:	b93a      	cbnz	r2, 8004616 <strcat+0x1a>
 8004606:	3b01      	subs	r3, #1
 8004608:	f811 2b01 	ldrb.w	r2, [r1], #1
 800460c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004610:	2a00      	cmp	r2, #0
 8004612:	d1f9      	bne.n	8004608 <strcat+0xc>
 8004614:	bd10      	pop	{r4, pc}
 8004616:	4623      	mov	r3, r4
 8004618:	e7f2      	b.n	8004600 <strcat+0x4>

0800461a <__ssputs_r>:
 800461a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800461e:	688e      	ldr	r6, [r1, #8]
 8004620:	429e      	cmp	r6, r3
 8004622:	4682      	mov	sl, r0
 8004624:	460c      	mov	r4, r1
 8004626:	4690      	mov	r8, r2
 8004628:	4699      	mov	r9, r3
 800462a:	d837      	bhi.n	800469c <__ssputs_r+0x82>
 800462c:	898a      	ldrh	r2, [r1, #12]
 800462e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004632:	d031      	beq.n	8004698 <__ssputs_r+0x7e>
 8004634:	6825      	ldr	r5, [r4, #0]
 8004636:	6909      	ldr	r1, [r1, #16]
 8004638:	1a6f      	subs	r7, r5, r1
 800463a:	6965      	ldr	r5, [r4, #20]
 800463c:	2302      	movs	r3, #2
 800463e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004642:	fb95 f5f3 	sdiv	r5, r5, r3
 8004646:	f109 0301 	add.w	r3, r9, #1
 800464a:	443b      	add	r3, r7
 800464c:	429d      	cmp	r5, r3
 800464e:	bf38      	it	cc
 8004650:	461d      	movcc	r5, r3
 8004652:	0553      	lsls	r3, r2, #21
 8004654:	d530      	bpl.n	80046b8 <__ssputs_r+0x9e>
 8004656:	4629      	mov	r1, r5
 8004658:	f000 fb2c 	bl	8004cb4 <_malloc_r>
 800465c:	4606      	mov	r6, r0
 800465e:	b950      	cbnz	r0, 8004676 <__ssputs_r+0x5c>
 8004660:	230c      	movs	r3, #12
 8004662:	f8ca 3000 	str.w	r3, [sl]
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466c:	81a3      	strh	r3, [r4, #12]
 800466e:	f04f 30ff 	mov.w	r0, #4294967295
 8004672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004676:	463a      	mov	r2, r7
 8004678:	6921      	ldr	r1, [r4, #16]
 800467a:	f000 faa9 	bl	8004bd0 <memcpy>
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	6126      	str	r6, [r4, #16]
 800468c:	6165      	str	r5, [r4, #20]
 800468e:	443e      	add	r6, r7
 8004690:	1bed      	subs	r5, r5, r7
 8004692:	6026      	str	r6, [r4, #0]
 8004694:	60a5      	str	r5, [r4, #8]
 8004696:	464e      	mov	r6, r9
 8004698:	454e      	cmp	r6, r9
 800469a:	d900      	bls.n	800469e <__ssputs_r+0x84>
 800469c:	464e      	mov	r6, r9
 800469e:	4632      	mov	r2, r6
 80046a0:	4641      	mov	r1, r8
 80046a2:	6820      	ldr	r0, [r4, #0]
 80046a4:	f000 fa9f 	bl	8004be6 <memmove>
 80046a8:	68a3      	ldr	r3, [r4, #8]
 80046aa:	1b9b      	subs	r3, r3, r6
 80046ac:	60a3      	str	r3, [r4, #8]
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	441e      	add	r6, r3
 80046b2:	6026      	str	r6, [r4, #0]
 80046b4:	2000      	movs	r0, #0
 80046b6:	e7dc      	b.n	8004672 <__ssputs_r+0x58>
 80046b8:	462a      	mov	r2, r5
 80046ba:	f000 fb55 	bl	8004d68 <_realloc_r>
 80046be:	4606      	mov	r6, r0
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d1e2      	bne.n	800468a <__ssputs_r+0x70>
 80046c4:	6921      	ldr	r1, [r4, #16]
 80046c6:	4650      	mov	r0, sl
 80046c8:	f000 faa6 	bl	8004c18 <_free_r>
 80046cc:	e7c8      	b.n	8004660 <__ssputs_r+0x46>
	...

080046d0 <_svfiprintf_r>:
 80046d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d4:	461d      	mov	r5, r3
 80046d6:	898b      	ldrh	r3, [r1, #12]
 80046d8:	061f      	lsls	r7, r3, #24
 80046da:	b09d      	sub	sp, #116	; 0x74
 80046dc:	4680      	mov	r8, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	4616      	mov	r6, r2
 80046e2:	d50f      	bpl.n	8004704 <_svfiprintf_r+0x34>
 80046e4:	690b      	ldr	r3, [r1, #16]
 80046e6:	b96b      	cbnz	r3, 8004704 <_svfiprintf_r+0x34>
 80046e8:	2140      	movs	r1, #64	; 0x40
 80046ea:	f000 fae3 	bl	8004cb4 <_malloc_r>
 80046ee:	6020      	str	r0, [r4, #0]
 80046f0:	6120      	str	r0, [r4, #16]
 80046f2:	b928      	cbnz	r0, 8004700 <_svfiprintf_r+0x30>
 80046f4:	230c      	movs	r3, #12
 80046f6:	f8c8 3000 	str.w	r3, [r8]
 80046fa:	f04f 30ff 	mov.w	r0, #4294967295
 80046fe:	e0c8      	b.n	8004892 <_svfiprintf_r+0x1c2>
 8004700:	2340      	movs	r3, #64	; 0x40
 8004702:	6163      	str	r3, [r4, #20]
 8004704:	2300      	movs	r3, #0
 8004706:	9309      	str	r3, [sp, #36]	; 0x24
 8004708:	2320      	movs	r3, #32
 800470a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800470e:	2330      	movs	r3, #48	; 0x30
 8004710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004714:	9503      	str	r5, [sp, #12]
 8004716:	f04f 0b01 	mov.w	fp, #1
 800471a:	4637      	mov	r7, r6
 800471c:	463d      	mov	r5, r7
 800471e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004722:	b10b      	cbz	r3, 8004728 <_svfiprintf_r+0x58>
 8004724:	2b25      	cmp	r3, #37	; 0x25
 8004726:	d13e      	bne.n	80047a6 <_svfiprintf_r+0xd6>
 8004728:	ebb7 0a06 	subs.w	sl, r7, r6
 800472c:	d00b      	beq.n	8004746 <_svfiprintf_r+0x76>
 800472e:	4653      	mov	r3, sl
 8004730:	4632      	mov	r2, r6
 8004732:	4621      	mov	r1, r4
 8004734:	4640      	mov	r0, r8
 8004736:	f7ff ff70 	bl	800461a <__ssputs_r>
 800473a:	3001      	adds	r0, #1
 800473c:	f000 80a4 	beq.w	8004888 <_svfiprintf_r+0x1b8>
 8004740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004742:	4453      	add	r3, sl
 8004744:	9309      	str	r3, [sp, #36]	; 0x24
 8004746:	783b      	ldrb	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 809d 	beq.w	8004888 <_svfiprintf_r+0x1b8>
 800474e:	2300      	movs	r3, #0
 8004750:	f04f 32ff 	mov.w	r2, #4294967295
 8004754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004758:	9304      	str	r3, [sp, #16]
 800475a:	9307      	str	r3, [sp, #28]
 800475c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004760:	931a      	str	r3, [sp, #104]	; 0x68
 8004762:	462f      	mov	r7, r5
 8004764:	2205      	movs	r2, #5
 8004766:	f817 1b01 	ldrb.w	r1, [r7], #1
 800476a:	4850      	ldr	r0, [pc, #320]	; (80048ac <_svfiprintf_r+0x1dc>)
 800476c:	f7fb fd38 	bl	80001e0 <memchr>
 8004770:	9b04      	ldr	r3, [sp, #16]
 8004772:	b9d0      	cbnz	r0, 80047aa <_svfiprintf_r+0xda>
 8004774:	06d9      	lsls	r1, r3, #27
 8004776:	bf44      	itt	mi
 8004778:	2220      	movmi	r2, #32
 800477a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800477e:	071a      	lsls	r2, r3, #28
 8004780:	bf44      	itt	mi
 8004782:	222b      	movmi	r2, #43	; 0x2b
 8004784:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004788:	782a      	ldrb	r2, [r5, #0]
 800478a:	2a2a      	cmp	r2, #42	; 0x2a
 800478c:	d015      	beq.n	80047ba <_svfiprintf_r+0xea>
 800478e:	9a07      	ldr	r2, [sp, #28]
 8004790:	462f      	mov	r7, r5
 8004792:	2000      	movs	r0, #0
 8004794:	250a      	movs	r5, #10
 8004796:	4639      	mov	r1, r7
 8004798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800479c:	3b30      	subs	r3, #48	; 0x30
 800479e:	2b09      	cmp	r3, #9
 80047a0:	d94d      	bls.n	800483e <_svfiprintf_r+0x16e>
 80047a2:	b1b8      	cbz	r0, 80047d4 <_svfiprintf_r+0x104>
 80047a4:	e00f      	b.n	80047c6 <_svfiprintf_r+0xf6>
 80047a6:	462f      	mov	r7, r5
 80047a8:	e7b8      	b.n	800471c <_svfiprintf_r+0x4c>
 80047aa:	4a40      	ldr	r2, [pc, #256]	; (80048ac <_svfiprintf_r+0x1dc>)
 80047ac:	1a80      	subs	r0, r0, r2
 80047ae:	fa0b f000 	lsl.w	r0, fp, r0
 80047b2:	4318      	orrs	r0, r3
 80047b4:	9004      	str	r0, [sp, #16]
 80047b6:	463d      	mov	r5, r7
 80047b8:	e7d3      	b.n	8004762 <_svfiprintf_r+0x92>
 80047ba:	9a03      	ldr	r2, [sp, #12]
 80047bc:	1d11      	adds	r1, r2, #4
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	9103      	str	r1, [sp, #12]
 80047c2:	2a00      	cmp	r2, #0
 80047c4:	db01      	blt.n	80047ca <_svfiprintf_r+0xfa>
 80047c6:	9207      	str	r2, [sp, #28]
 80047c8:	e004      	b.n	80047d4 <_svfiprintf_r+0x104>
 80047ca:	4252      	negs	r2, r2
 80047cc:	f043 0302 	orr.w	r3, r3, #2
 80047d0:	9207      	str	r2, [sp, #28]
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	783b      	ldrb	r3, [r7, #0]
 80047d6:	2b2e      	cmp	r3, #46	; 0x2e
 80047d8:	d10c      	bne.n	80047f4 <_svfiprintf_r+0x124>
 80047da:	787b      	ldrb	r3, [r7, #1]
 80047dc:	2b2a      	cmp	r3, #42	; 0x2a
 80047de:	d133      	bne.n	8004848 <_svfiprintf_r+0x178>
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	9203      	str	r2, [sp, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bfb8      	it	lt
 80047ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80047f0:	3702      	adds	r7, #2
 80047f2:	9305      	str	r3, [sp, #20]
 80047f4:	4d2e      	ldr	r5, [pc, #184]	; (80048b0 <_svfiprintf_r+0x1e0>)
 80047f6:	7839      	ldrb	r1, [r7, #0]
 80047f8:	2203      	movs	r2, #3
 80047fa:	4628      	mov	r0, r5
 80047fc:	f7fb fcf0 	bl	80001e0 <memchr>
 8004800:	b138      	cbz	r0, 8004812 <_svfiprintf_r+0x142>
 8004802:	2340      	movs	r3, #64	; 0x40
 8004804:	1b40      	subs	r0, r0, r5
 8004806:	fa03 f000 	lsl.w	r0, r3, r0
 800480a:	9b04      	ldr	r3, [sp, #16]
 800480c:	4303      	orrs	r3, r0
 800480e:	3701      	adds	r7, #1
 8004810:	9304      	str	r3, [sp, #16]
 8004812:	7839      	ldrb	r1, [r7, #0]
 8004814:	4827      	ldr	r0, [pc, #156]	; (80048b4 <_svfiprintf_r+0x1e4>)
 8004816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800481a:	2206      	movs	r2, #6
 800481c:	1c7e      	adds	r6, r7, #1
 800481e:	f7fb fcdf 	bl	80001e0 <memchr>
 8004822:	2800      	cmp	r0, #0
 8004824:	d038      	beq.n	8004898 <_svfiprintf_r+0x1c8>
 8004826:	4b24      	ldr	r3, [pc, #144]	; (80048b8 <_svfiprintf_r+0x1e8>)
 8004828:	bb13      	cbnz	r3, 8004870 <_svfiprintf_r+0x1a0>
 800482a:	9b03      	ldr	r3, [sp, #12]
 800482c:	3307      	adds	r3, #7
 800482e:	f023 0307 	bic.w	r3, r3, #7
 8004832:	3308      	adds	r3, #8
 8004834:	9303      	str	r3, [sp, #12]
 8004836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004838:	444b      	add	r3, r9
 800483a:	9309      	str	r3, [sp, #36]	; 0x24
 800483c:	e76d      	b.n	800471a <_svfiprintf_r+0x4a>
 800483e:	fb05 3202 	mla	r2, r5, r2, r3
 8004842:	2001      	movs	r0, #1
 8004844:	460f      	mov	r7, r1
 8004846:	e7a6      	b.n	8004796 <_svfiprintf_r+0xc6>
 8004848:	2300      	movs	r3, #0
 800484a:	3701      	adds	r7, #1
 800484c:	9305      	str	r3, [sp, #20]
 800484e:	4619      	mov	r1, r3
 8004850:	250a      	movs	r5, #10
 8004852:	4638      	mov	r0, r7
 8004854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004858:	3a30      	subs	r2, #48	; 0x30
 800485a:	2a09      	cmp	r2, #9
 800485c:	d903      	bls.n	8004866 <_svfiprintf_r+0x196>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0c8      	beq.n	80047f4 <_svfiprintf_r+0x124>
 8004862:	9105      	str	r1, [sp, #20]
 8004864:	e7c6      	b.n	80047f4 <_svfiprintf_r+0x124>
 8004866:	fb05 2101 	mla	r1, r5, r1, r2
 800486a:	2301      	movs	r3, #1
 800486c:	4607      	mov	r7, r0
 800486e:	e7f0      	b.n	8004852 <_svfiprintf_r+0x182>
 8004870:	ab03      	add	r3, sp, #12
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4622      	mov	r2, r4
 8004876:	4b11      	ldr	r3, [pc, #68]	; (80048bc <_svfiprintf_r+0x1ec>)
 8004878:	a904      	add	r1, sp, #16
 800487a:	4640      	mov	r0, r8
 800487c:	f3af 8000 	nop.w
 8004880:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004884:	4681      	mov	r9, r0
 8004886:	d1d6      	bne.n	8004836 <_svfiprintf_r+0x166>
 8004888:	89a3      	ldrh	r3, [r4, #12]
 800488a:	065b      	lsls	r3, r3, #25
 800488c:	f53f af35 	bmi.w	80046fa <_svfiprintf_r+0x2a>
 8004890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004892:	b01d      	add	sp, #116	; 0x74
 8004894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004898:	ab03      	add	r3, sp, #12
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	4622      	mov	r2, r4
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <_svfiprintf_r+0x1ec>)
 80048a0:	a904      	add	r1, sp, #16
 80048a2:	4640      	mov	r0, r8
 80048a4:	f000 f882 	bl	80049ac <_printf_i>
 80048a8:	e7ea      	b.n	8004880 <_svfiprintf_r+0x1b0>
 80048aa:	bf00      	nop
 80048ac:	08004f78 	.word	0x08004f78
 80048b0:	08004f7e 	.word	0x08004f7e
 80048b4:	08004f82 	.word	0x08004f82
 80048b8:	00000000 	.word	0x00000000
 80048bc:	0800461b 	.word	0x0800461b

080048c0 <_printf_common>:
 80048c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	4691      	mov	r9, r2
 80048c6:	461f      	mov	r7, r3
 80048c8:	688a      	ldr	r2, [r1, #8]
 80048ca:	690b      	ldr	r3, [r1, #16]
 80048cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048d0:	4293      	cmp	r3, r2
 80048d2:	bfb8      	it	lt
 80048d4:	4613      	movlt	r3, r2
 80048d6:	f8c9 3000 	str.w	r3, [r9]
 80048da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048de:	4606      	mov	r6, r0
 80048e0:	460c      	mov	r4, r1
 80048e2:	b112      	cbz	r2, 80048ea <_printf_common+0x2a>
 80048e4:	3301      	adds	r3, #1
 80048e6:	f8c9 3000 	str.w	r3, [r9]
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	0699      	lsls	r1, r3, #26
 80048ee:	bf42      	ittt	mi
 80048f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048f4:	3302      	addmi	r3, #2
 80048f6:	f8c9 3000 	strmi.w	r3, [r9]
 80048fa:	6825      	ldr	r5, [r4, #0]
 80048fc:	f015 0506 	ands.w	r5, r5, #6
 8004900:	d107      	bne.n	8004912 <_printf_common+0x52>
 8004902:	f104 0a19 	add.w	sl, r4, #25
 8004906:	68e3      	ldr	r3, [r4, #12]
 8004908:	f8d9 2000 	ldr.w	r2, [r9]
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	42ab      	cmp	r3, r5
 8004910:	dc28      	bgt.n	8004964 <_printf_common+0xa4>
 8004912:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004916:	6822      	ldr	r2, [r4, #0]
 8004918:	3300      	adds	r3, #0
 800491a:	bf18      	it	ne
 800491c:	2301      	movne	r3, #1
 800491e:	0692      	lsls	r2, r2, #26
 8004920:	d42d      	bmi.n	800497e <_printf_common+0xbe>
 8004922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004926:	4639      	mov	r1, r7
 8004928:	4630      	mov	r0, r6
 800492a:	47c0      	blx	r8
 800492c:	3001      	adds	r0, #1
 800492e:	d020      	beq.n	8004972 <_printf_common+0xb2>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	68e5      	ldr	r5, [r4, #12]
 8004934:	f8d9 2000 	ldr.w	r2, [r9]
 8004938:	f003 0306 	and.w	r3, r3, #6
 800493c:	2b04      	cmp	r3, #4
 800493e:	bf08      	it	eq
 8004940:	1aad      	subeq	r5, r5, r2
 8004942:	68a3      	ldr	r3, [r4, #8]
 8004944:	6922      	ldr	r2, [r4, #16]
 8004946:	bf0c      	ite	eq
 8004948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800494c:	2500      	movne	r5, #0
 800494e:	4293      	cmp	r3, r2
 8004950:	bfc4      	itt	gt
 8004952:	1a9b      	subgt	r3, r3, r2
 8004954:	18ed      	addgt	r5, r5, r3
 8004956:	f04f 0900 	mov.w	r9, #0
 800495a:	341a      	adds	r4, #26
 800495c:	454d      	cmp	r5, r9
 800495e:	d11a      	bne.n	8004996 <_printf_common+0xd6>
 8004960:	2000      	movs	r0, #0
 8004962:	e008      	b.n	8004976 <_printf_common+0xb6>
 8004964:	2301      	movs	r3, #1
 8004966:	4652      	mov	r2, sl
 8004968:	4639      	mov	r1, r7
 800496a:	4630      	mov	r0, r6
 800496c:	47c0      	blx	r8
 800496e:	3001      	adds	r0, #1
 8004970:	d103      	bne.n	800497a <_printf_common+0xba>
 8004972:	f04f 30ff 	mov.w	r0, #4294967295
 8004976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497a:	3501      	adds	r5, #1
 800497c:	e7c3      	b.n	8004906 <_printf_common+0x46>
 800497e:	18e1      	adds	r1, r4, r3
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	2030      	movs	r0, #48	; 0x30
 8004984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004988:	4422      	add	r2, r4
 800498a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800498e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004992:	3302      	adds	r3, #2
 8004994:	e7c5      	b.n	8004922 <_printf_common+0x62>
 8004996:	2301      	movs	r3, #1
 8004998:	4622      	mov	r2, r4
 800499a:	4639      	mov	r1, r7
 800499c:	4630      	mov	r0, r6
 800499e:	47c0      	blx	r8
 80049a0:	3001      	adds	r0, #1
 80049a2:	d0e6      	beq.n	8004972 <_printf_common+0xb2>
 80049a4:	f109 0901 	add.w	r9, r9, #1
 80049a8:	e7d8      	b.n	800495c <_printf_common+0x9c>
	...

080049ac <_printf_i>:
 80049ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80049b4:	460c      	mov	r4, r1
 80049b6:	7e09      	ldrb	r1, [r1, #24]
 80049b8:	b085      	sub	sp, #20
 80049ba:	296e      	cmp	r1, #110	; 0x6e
 80049bc:	4617      	mov	r7, r2
 80049be:	4606      	mov	r6, r0
 80049c0:	4698      	mov	r8, r3
 80049c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049c4:	f000 80b3 	beq.w	8004b2e <_printf_i+0x182>
 80049c8:	d822      	bhi.n	8004a10 <_printf_i+0x64>
 80049ca:	2963      	cmp	r1, #99	; 0x63
 80049cc:	d036      	beq.n	8004a3c <_printf_i+0x90>
 80049ce:	d80a      	bhi.n	80049e6 <_printf_i+0x3a>
 80049d0:	2900      	cmp	r1, #0
 80049d2:	f000 80b9 	beq.w	8004b48 <_printf_i+0x19c>
 80049d6:	2958      	cmp	r1, #88	; 0x58
 80049d8:	f000 8083 	beq.w	8004ae2 <_printf_i+0x136>
 80049dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049e4:	e032      	b.n	8004a4c <_printf_i+0xa0>
 80049e6:	2964      	cmp	r1, #100	; 0x64
 80049e8:	d001      	beq.n	80049ee <_printf_i+0x42>
 80049ea:	2969      	cmp	r1, #105	; 0x69
 80049ec:	d1f6      	bne.n	80049dc <_printf_i+0x30>
 80049ee:	6820      	ldr	r0, [r4, #0]
 80049f0:	6813      	ldr	r3, [r2, #0]
 80049f2:	0605      	lsls	r5, r0, #24
 80049f4:	f103 0104 	add.w	r1, r3, #4
 80049f8:	d52a      	bpl.n	8004a50 <_printf_i+0xa4>
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6011      	str	r1, [r2, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da03      	bge.n	8004a0a <_printf_i+0x5e>
 8004a02:	222d      	movs	r2, #45	; 0x2d
 8004a04:	425b      	negs	r3, r3
 8004a06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a0a:	486f      	ldr	r0, [pc, #444]	; (8004bc8 <_printf_i+0x21c>)
 8004a0c:	220a      	movs	r2, #10
 8004a0e:	e039      	b.n	8004a84 <_printf_i+0xd8>
 8004a10:	2973      	cmp	r1, #115	; 0x73
 8004a12:	f000 809d 	beq.w	8004b50 <_printf_i+0x1a4>
 8004a16:	d808      	bhi.n	8004a2a <_printf_i+0x7e>
 8004a18:	296f      	cmp	r1, #111	; 0x6f
 8004a1a:	d020      	beq.n	8004a5e <_printf_i+0xb2>
 8004a1c:	2970      	cmp	r1, #112	; 0x70
 8004a1e:	d1dd      	bne.n	80049dc <_printf_i+0x30>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	f043 0320 	orr.w	r3, r3, #32
 8004a26:	6023      	str	r3, [r4, #0]
 8004a28:	e003      	b.n	8004a32 <_printf_i+0x86>
 8004a2a:	2975      	cmp	r1, #117	; 0x75
 8004a2c:	d017      	beq.n	8004a5e <_printf_i+0xb2>
 8004a2e:	2978      	cmp	r1, #120	; 0x78
 8004a30:	d1d4      	bne.n	80049dc <_printf_i+0x30>
 8004a32:	2378      	movs	r3, #120	; 0x78
 8004a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a38:	4864      	ldr	r0, [pc, #400]	; (8004bcc <_printf_i+0x220>)
 8004a3a:	e055      	b.n	8004ae8 <_printf_i+0x13c>
 8004a3c:	6813      	ldr	r3, [r2, #0]
 8004a3e:	1d19      	adds	r1, r3, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6011      	str	r1, [r2, #0]
 8004a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e08c      	b.n	8004b6a <_printf_i+0x1be>
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6011      	str	r1, [r2, #0]
 8004a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a58:	bf18      	it	ne
 8004a5a:	b21b      	sxthne	r3, r3
 8004a5c:	e7cf      	b.n	80049fe <_printf_i+0x52>
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	6825      	ldr	r5, [r4, #0]
 8004a62:	1d18      	adds	r0, r3, #4
 8004a64:	6010      	str	r0, [r2, #0]
 8004a66:	0628      	lsls	r0, r5, #24
 8004a68:	d501      	bpl.n	8004a6e <_printf_i+0xc2>
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	e002      	b.n	8004a74 <_printf_i+0xc8>
 8004a6e:	0668      	lsls	r0, r5, #25
 8004a70:	d5fb      	bpl.n	8004a6a <_printf_i+0xbe>
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	4854      	ldr	r0, [pc, #336]	; (8004bc8 <_printf_i+0x21c>)
 8004a76:	296f      	cmp	r1, #111	; 0x6f
 8004a78:	bf14      	ite	ne
 8004a7a:	220a      	movne	r2, #10
 8004a7c:	2208      	moveq	r2, #8
 8004a7e:	2100      	movs	r1, #0
 8004a80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a84:	6865      	ldr	r5, [r4, #4]
 8004a86:	60a5      	str	r5, [r4, #8]
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	f2c0 8095 	blt.w	8004bb8 <_printf_i+0x20c>
 8004a8e:	6821      	ldr	r1, [r4, #0]
 8004a90:	f021 0104 	bic.w	r1, r1, #4
 8004a94:	6021      	str	r1, [r4, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d13d      	bne.n	8004b16 <_printf_i+0x16a>
 8004a9a:	2d00      	cmp	r5, #0
 8004a9c:	f040 808e 	bne.w	8004bbc <_printf_i+0x210>
 8004aa0:	4665      	mov	r5, ip
 8004aa2:	2a08      	cmp	r2, #8
 8004aa4:	d10b      	bne.n	8004abe <_printf_i+0x112>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	07db      	lsls	r3, r3, #31
 8004aaa:	d508      	bpl.n	8004abe <_printf_i+0x112>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	bfde      	ittt	le
 8004ab4:	2330      	movle	r3, #48	; 0x30
 8004ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004abe:	ebac 0305 	sub.w	r3, ip, r5
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	f8cd 8000 	str.w	r8, [sp]
 8004ac8:	463b      	mov	r3, r7
 8004aca:	aa03      	add	r2, sp, #12
 8004acc:	4621      	mov	r1, r4
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f7ff fef6 	bl	80048c0 <_printf_common>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d14d      	bne.n	8004b74 <_printf_i+0x1c8>
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	b005      	add	sp, #20
 8004ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ae2:	4839      	ldr	r0, [pc, #228]	; (8004bc8 <_printf_i+0x21c>)
 8004ae4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ae8:	6813      	ldr	r3, [r2, #0]
 8004aea:	6821      	ldr	r1, [r4, #0]
 8004aec:	1d1d      	adds	r5, r3, #4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6015      	str	r5, [r2, #0]
 8004af2:	060a      	lsls	r2, r1, #24
 8004af4:	d50b      	bpl.n	8004b0e <_printf_i+0x162>
 8004af6:	07ca      	lsls	r2, r1, #31
 8004af8:	bf44      	itt	mi
 8004afa:	f041 0120 	orrmi.w	r1, r1, #32
 8004afe:	6021      	strmi	r1, [r4, #0]
 8004b00:	b91b      	cbnz	r3, 8004b0a <_printf_i+0x15e>
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	f022 0220 	bic.w	r2, r2, #32
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	2210      	movs	r2, #16
 8004b0c:	e7b7      	b.n	8004a7e <_printf_i+0xd2>
 8004b0e:	064d      	lsls	r5, r1, #25
 8004b10:	bf48      	it	mi
 8004b12:	b29b      	uxthmi	r3, r3
 8004b14:	e7ef      	b.n	8004af6 <_printf_i+0x14a>
 8004b16:	4665      	mov	r5, ip
 8004b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b1c:	fb02 3311 	mls	r3, r2, r1, r3
 8004b20:	5cc3      	ldrb	r3, [r0, r3]
 8004b22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b26:	460b      	mov	r3, r1
 8004b28:	2900      	cmp	r1, #0
 8004b2a:	d1f5      	bne.n	8004b18 <_printf_i+0x16c>
 8004b2c:	e7b9      	b.n	8004aa2 <_printf_i+0xf6>
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	6825      	ldr	r5, [r4, #0]
 8004b32:	6961      	ldr	r1, [r4, #20]
 8004b34:	1d18      	adds	r0, r3, #4
 8004b36:	6010      	str	r0, [r2, #0]
 8004b38:	0628      	lsls	r0, r5, #24
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	d501      	bpl.n	8004b42 <_printf_i+0x196>
 8004b3e:	6019      	str	r1, [r3, #0]
 8004b40:	e002      	b.n	8004b48 <_printf_i+0x19c>
 8004b42:	066a      	lsls	r2, r5, #25
 8004b44:	d5fb      	bpl.n	8004b3e <_printf_i+0x192>
 8004b46:	8019      	strh	r1, [r3, #0]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	6123      	str	r3, [r4, #16]
 8004b4c:	4665      	mov	r5, ip
 8004b4e:	e7b9      	b.n	8004ac4 <_printf_i+0x118>
 8004b50:	6813      	ldr	r3, [r2, #0]
 8004b52:	1d19      	adds	r1, r3, #4
 8004b54:	6011      	str	r1, [r2, #0]
 8004b56:	681d      	ldr	r5, [r3, #0]
 8004b58:	6862      	ldr	r2, [r4, #4]
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f7fb fb3f 	bl	80001e0 <memchr>
 8004b62:	b108      	cbz	r0, 8004b68 <_printf_i+0x1bc>
 8004b64:	1b40      	subs	r0, r0, r5
 8004b66:	6060      	str	r0, [r4, #4]
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	6123      	str	r3, [r4, #16]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b72:	e7a7      	b.n	8004ac4 <_printf_i+0x118>
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	462a      	mov	r2, r5
 8004b78:	4639      	mov	r1, r7
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	47c0      	blx	r8
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d0aa      	beq.n	8004ad8 <_printf_i+0x12c>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	079b      	lsls	r3, r3, #30
 8004b86:	d413      	bmi.n	8004bb0 <_printf_i+0x204>
 8004b88:	68e0      	ldr	r0, [r4, #12]
 8004b8a:	9b03      	ldr	r3, [sp, #12]
 8004b8c:	4298      	cmp	r0, r3
 8004b8e:	bfb8      	it	lt
 8004b90:	4618      	movlt	r0, r3
 8004b92:	e7a3      	b.n	8004adc <_printf_i+0x130>
 8004b94:	2301      	movs	r3, #1
 8004b96:	464a      	mov	r2, r9
 8004b98:	4639      	mov	r1, r7
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	47c0      	blx	r8
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d09a      	beq.n	8004ad8 <_printf_i+0x12c>
 8004ba2:	3501      	adds	r5, #1
 8004ba4:	68e3      	ldr	r3, [r4, #12]
 8004ba6:	9a03      	ldr	r2, [sp, #12]
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	42ab      	cmp	r3, r5
 8004bac:	dcf2      	bgt.n	8004b94 <_printf_i+0x1e8>
 8004bae:	e7eb      	b.n	8004b88 <_printf_i+0x1dc>
 8004bb0:	2500      	movs	r5, #0
 8004bb2:	f104 0919 	add.w	r9, r4, #25
 8004bb6:	e7f5      	b.n	8004ba4 <_printf_i+0x1f8>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1ac      	bne.n	8004b16 <_printf_i+0x16a>
 8004bbc:	7803      	ldrb	r3, [r0, #0]
 8004bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc6:	e76c      	b.n	8004aa2 <_printf_i+0xf6>
 8004bc8:	08004f89 	.word	0x08004f89
 8004bcc:	08004f9a 	.word	0x08004f9a

08004bd0 <memcpy>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	1e43      	subs	r3, r0, #1
 8004bd4:	440a      	add	r2, r1
 8004bd6:	4291      	cmp	r1, r2
 8004bd8:	d100      	bne.n	8004bdc <memcpy+0xc>
 8004bda:	bd10      	pop	{r4, pc}
 8004bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004be4:	e7f7      	b.n	8004bd6 <memcpy+0x6>

08004be6 <memmove>:
 8004be6:	4288      	cmp	r0, r1
 8004be8:	b510      	push	{r4, lr}
 8004bea:	eb01 0302 	add.w	r3, r1, r2
 8004bee:	d807      	bhi.n	8004c00 <memmove+0x1a>
 8004bf0:	1e42      	subs	r2, r0, #1
 8004bf2:	4299      	cmp	r1, r3
 8004bf4:	d00a      	beq.n	8004c0c <memmove+0x26>
 8004bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bfa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004bfe:	e7f8      	b.n	8004bf2 <memmove+0xc>
 8004c00:	4283      	cmp	r3, r0
 8004c02:	d9f5      	bls.n	8004bf0 <memmove+0xa>
 8004c04:	1881      	adds	r1, r0, r2
 8004c06:	1ad2      	subs	r2, r2, r3
 8004c08:	42d3      	cmn	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memmove+0x28>
 8004c0c:	bd10      	pop	{r4, pc}
 8004c0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c12:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c16:	e7f7      	b.n	8004c08 <memmove+0x22>

08004c18 <_free_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	2900      	cmp	r1, #0
 8004c1e:	d045      	beq.n	8004cac <_free_r+0x94>
 8004c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c24:	1f0c      	subs	r4, r1, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bfb8      	it	lt
 8004c2a:	18e4      	addlt	r4, r4, r3
 8004c2c:	f000 f8d2 	bl	8004dd4 <__malloc_lock>
 8004c30:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <_free_r+0x98>)
 8004c32:	6813      	ldr	r3, [r2, #0]
 8004c34:	4610      	mov	r0, r2
 8004c36:	b933      	cbnz	r3, 8004c46 <_free_r+0x2e>
 8004c38:	6063      	str	r3, [r4, #4]
 8004c3a:	6014      	str	r4, [r2, #0]
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c42:	f000 b8c8 	b.w	8004dd6 <__malloc_unlock>
 8004c46:	42a3      	cmp	r3, r4
 8004c48:	d90c      	bls.n	8004c64 <_free_r+0x4c>
 8004c4a:	6821      	ldr	r1, [r4, #0]
 8004c4c:	1862      	adds	r2, r4, r1
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	bf04      	itt	eq
 8004c52:	681a      	ldreq	r2, [r3, #0]
 8004c54:	685b      	ldreq	r3, [r3, #4]
 8004c56:	6063      	str	r3, [r4, #4]
 8004c58:	bf04      	itt	eq
 8004c5a:	1852      	addeq	r2, r2, r1
 8004c5c:	6022      	streq	r2, [r4, #0]
 8004c5e:	6004      	str	r4, [r0, #0]
 8004c60:	e7ec      	b.n	8004c3c <_free_r+0x24>
 8004c62:	4613      	mov	r3, r2
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	b10a      	cbz	r2, 8004c6c <_free_r+0x54>
 8004c68:	42a2      	cmp	r2, r4
 8004c6a:	d9fa      	bls.n	8004c62 <_free_r+0x4a>
 8004c6c:	6819      	ldr	r1, [r3, #0]
 8004c6e:	1858      	adds	r0, r3, r1
 8004c70:	42a0      	cmp	r0, r4
 8004c72:	d10b      	bne.n	8004c8c <_free_r+0x74>
 8004c74:	6820      	ldr	r0, [r4, #0]
 8004c76:	4401      	add	r1, r0
 8004c78:	1858      	adds	r0, r3, r1
 8004c7a:	4282      	cmp	r2, r0
 8004c7c:	6019      	str	r1, [r3, #0]
 8004c7e:	d1dd      	bne.n	8004c3c <_free_r+0x24>
 8004c80:	6810      	ldr	r0, [r2, #0]
 8004c82:	6852      	ldr	r2, [r2, #4]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	4401      	add	r1, r0
 8004c88:	6019      	str	r1, [r3, #0]
 8004c8a:	e7d7      	b.n	8004c3c <_free_r+0x24>
 8004c8c:	d902      	bls.n	8004c94 <_free_r+0x7c>
 8004c8e:	230c      	movs	r3, #12
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	e7d3      	b.n	8004c3c <_free_r+0x24>
 8004c94:	6820      	ldr	r0, [r4, #0]
 8004c96:	1821      	adds	r1, r4, r0
 8004c98:	428a      	cmp	r2, r1
 8004c9a:	bf04      	itt	eq
 8004c9c:	6811      	ldreq	r1, [r2, #0]
 8004c9e:	6852      	ldreq	r2, [r2, #4]
 8004ca0:	6062      	str	r2, [r4, #4]
 8004ca2:	bf04      	itt	eq
 8004ca4:	1809      	addeq	r1, r1, r0
 8004ca6:	6021      	streq	r1, [r4, #0]
 8004ca8:	605c      	str	r4, [r3, #4]
 8004caa:	e7c7      	b.n	8004c3c <_free_r+0x24>
 8004cac:	bd38      	pop	{r3, r4, r5, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000120 	.word	0x20000120

08004cb4 <_malloc_r>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	1ccd      	adds	r5, r1, #3
 8004cb8:	f025 0503 	bic.w	r5, r5, #3
 8004cbc:	3508      	adds	r5, #8
 8004cbe:	2d0c      	cmp	r5, #12
 8004cc0:	bf38      	it	cc
 8004cc2:	250c      	movcc	r5, #12
 8004cc4:	2d00      	cmp	r5, #0
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	db01      	blt.n	8004cce <_malloc_r+0x1a>
 8004cca:	42a9      	cmp	r1, r5
 8004ccc:	d903      	bls.n	8004cd6 <_malloc_r+0x22>
 8004cce:	230c      	movs	r3, #12
 8004cd0:	6033      	str	r3, [r6, #0]
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
 8004cd6:	f000 f87d 	bl	8004dd4 <__malloc_lock>
 8004cda:	4a21      	ldr	r2, [pc, #132]	; (8004d60 <_malloc_r+0xac>)
 8004cdc:	6814      	ldr	r4, [r2, #0]
 8004cde:	4621      	mov	r1, r4
 8004ce0:	b991      	cbnz	r1, 8004d08 <_malloc_r+0x54>
 8004ce2:	4c20      	ldr	r4, [pc, #128]	; (8004d64 <_malloc_r+0xb0>)
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	b91b      	cbnz	r3, 8004cf0 <_malloc_r+0x3c>
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 f863 	bl	8004db4 <_sbrk_r>
 8004cee:	6020      	str	r0, [r4, #0]
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 f85e 	bl	8004db4 <_sbrk_r>
 8004cf8:	1c43      	adds	r3, r0, #1
 8004cfa:	d124      	bne.n	8004d46 <_malloc_r+0x92>
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	6033      	str	r3, [r6, #0]
 8004d00:	4630      	mov	r0, r6
 8004d02:	f000 f868 	bl	8004dd6 <__malloc_unlock>
 8004d06:	e7e4      	b.n	8004cd2 <_malloc_r+0x1e>
 8004d08:	680b      	ldr	r3, [r1, #0]
 8004d0a:	1b5b      	subs	r3, r3, r5
 8004d0c:	d418      	bmi.n	8004d40 <_malloc_r+0x8c>
 8004d0e:	2b0b      	cmp	r3, #11
 8004d10:	d90f      	bls.n	8004d32 <_malloc_r+0x7e>
 8004d12:	600b      	str	r3, [r1, #0]
 8004d14:	50cd      	str	r5, [r1, r3]
 8004d16:	18cc      	adds	r4, r1, r3
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 f85c 	bl	8004dd6 <__malloc_unlock>
 8004d1e:	f104 000b 	add.w	r0, r4, #11
 8004d22:	1d23      	adds	r3, r4, #4
 8004d24:	f020 0007 	bic.w	r0, r0, #7
 8004d28:	1ac3      	subs	r3, r0, r3
 8004d2a:	d0d3      	beq.n	8004cd4 <_malloc_r+0x20>
 8004d2c:	425a      	negs	r2, r3
 8004d2e:	50e2      	str	r2, [r4, r3]
 8004d30:	e7d0      	b.n	8004cd4 <_malloc_r+0x20>
 8004d32:	428c      	cmp	r4, r1
 8004d34:	684b      	ldr	r3, [r1, #4]
 8004d36:	bf16      	itet	ne
 8004d38:	6063      	strne	r3, [r4, #4]
 8004d3a:	6013      	streq	r3, [r2, #0]
 8004d3c:	460c      	movne	r4, r1
 8004d3e:	e7eb      	b.n	8004d18 <_malloc_r+0x64>
 8004d40:	460c      	mov	r4, r1
 8004d42:	6849      	ldr	r1, [r1, #4]
 8004d44:	e7cc      	b.n	8004ce0 <_malloc_r+0x2c>
 8004d46:	1cc4      	adds	r4, r0, #3
 8004d48:	f024 0403 	bic.w	r4, r4, #3
 8004d4c:	42a0      	cmp	r0, r4
 8004d4e:	d005      	beq.n	8004d5c <_malloc_r+0xa8>
 8004d50:	1a21      	subs	r1, r4, r0
 8004d52:	4630      	mov	r0, r6
 8004d54:	f000 f82e 	bl	8004db4 <_sbrk_r>
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d0cf      	beq.n	8004cfc <_malloc_r+0x48>
 8004d5c:	6025      	str	r5, [r4, #0]
 8004d5e:	e7db      	b.n	8004d18 <_malloc_r+0x64>
 8004d60:	20000120 	.word	0x20000120
 8004d64:	20000124 	.word	0x20000124

08004d68 <_realloc_r>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	4607      	mov	r7, r0
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	460e      	mov	r6, r1
 8004d70:	b921      	cbnz	r1, 8004d7c <_realloc_r+0x14>
 8004d72:	4611      	mov	r1, r2
 8004d74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d78:	f7ff bf9c 	b.w	8004cb4 <_malloc_r>
 8004d7c:	b922      	cbnz	r2, 8004d88 <_realloc_r+0x20>
 8004d7e:	f7ff ff4b 	bl	8004c18 <_free_r>
 8004d82:	4625      	mov	r5, r4
 8004d84:	4628      	mov	r0, r5
 8004d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d88:	f000 f826 	bl	8004dd8 <_malloc_usable_size_r>
 8004d8c:	42a0      	cmp	r0, r4
 8004d8e:	d20f      	bcs.n	8004db0 <_realloc_r+0x48>
 8004d90:	4621      	mov	r1, r4
 8004d92:	4638      	mov	r0, r7
 8004d94:	f7ff ff8e 	bl	8004cb4 <_malloc_r>
 8004d98:	4605      	mov	r5, r0
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d0f2      	beq.n	8004d84 <_realloc_r+0x1c>
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4622      	mov	r2, r4
 8004da2:	f7ff ff15 	bl	8004bd0 <memcpy>
 8004da6:	4631      	mov	r1, r6
 8004da8:	4638      	mov	r0, r7
 8004daa:	f7ff ff35 	bl	8004c18 <_free_r>
 8004dae:	e7e9      	b.n	8004d84 <_realloc_r+0x1c>
 8004db0:	4635      	mov	r5, r6
 8004db2:	e7e7      	b.n	8004d84 <_realloc_r+0x1c>

08004db4 <_sbrk_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4c06      	ldr	r4, [pc, #24]	; (8004dd0 <_sbrk_r+0x1c>)
 8004db8:	2300      	movs	r3, #0
 8004dba:	4605      	mov	r5, r0
 8004dbc:	4608      	mov	r0, r1
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	f7fc fe06 	bl	80019d0 <_sbrk>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_sbrk_r+0x1a>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_sbrk_r+0x1a>
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	2000031c 	.word	0x2000031c

08004dd4 <__malloc_lock>:
 8004dd4:	4770      	bx	lr

08004dd6 <__malloc_unlock>:
 8004dd6:	4770      	bx	lr

08004dd8 <_malloc_usable_size_r>:
 8004dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ddc:	1f18      	subs	r0, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bfbc      	itt	lt
 8004de2:	580b      	ldrlt	r3, [r1, r0]
 8004de4:	18c0      	addlt	r0, r0, r3
 8004de6:	4770      	bx	lr

08004de8 <_init>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	bf00      	nop
 8004dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dee:	bc08      	pop	{r3}
 8004df0:	469e      	mov	lr, r3
 8004df2:	4770      	bx	lr

08004df4 <_fini>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr
